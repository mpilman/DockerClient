//
// ExecInspectResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExecInspectResponse: Codable, JSONEncodable, Hashable {

    public var canRemove: Bool?
    public var detachKeys: String?
    public var ID: String?
    public var running: Bool?
    public var exitCode: Int?
    public var processConfig: ProcessConfig?
    public var openStdin: Bool?
    public var openStderr: Bool?
    public var openStdout: Bool?
    public var containerID: String?
    /** The system process ID for the exec process. */
    public var pid: Int?

    public init(canRemove: Bool? = nil, detachKeys: String? = nil, ID: String? = nil, running: Bool? = nil, exitCode: Int? = nil, processConfig: ProcessConfig? = nil, openStdin: Bool? = nil, openStderr: Bool? = nil, openStdout: Bool? = nil, containerID: String? = nil, pid: Int? = nil) {
        self.canRemove = canRemove
        self.detachKeys = detachKeys
        self.ID = ID
        self.running = running
        self.exitCode = exitCode
        self.processConfig = processConfig
        self.openStdin = openStdin
        self.openStderr = openStderr
        self.openStdout = openStdout
        self.containerID = containerID
        self.pid = pid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case canRemove = "CanRemove"
        case detachKeys = "DetachKeys"
        case ID
        case running = "Running"
        case exitCode = "ExitCode"
        case processConfig = "ProcessConfig"
        case openStdin = "OpenStdin"
        case openStderr = "OpenStderr"
        case openStdout = "OpenStdout"
        case containerID = "ContainerID"
        case pid = "Pid"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(canRemove, forKey: .canRemove)
        try container.encodeIfPresent(detachKeys, forKey: .detachKeys)
        try container.encodeIfPresent(ID, forKey: .ID)
        try container.encodeIfPresent(running, forKey: .running)
        try container.encodeIfPresent(exitCode, forKey: .exitCode)
        try container.encodeIfPresent(processConfig, forKey: .processConfig)
        try container.encodeIfPresent(openStdin, forKey: .openStdin)
        try container.encodeIfPresent(openStderr, forKey: .openStderr)
        try container.encodeIfPresent(openStdout, forKey: .openStdout)
        try container.encodeIfPresent(containerID, forKey: .containerID)
        try container.encodeIfPresent(pid, forKey: .pid)
    }
}

