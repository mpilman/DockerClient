//
// SwarmSpec.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** User modifiable swarm configuration. */
public struct SwarmSpec: Codable, JSONEncodable, Hashable {

    /** Name of the swarm. */
    public var name: String?
    /** User-defined key/value metadata. */
    public var labels: [String: String]?
    public var orchestration: SwarmSpecOrchestration?
    public var raft: SwarmSpecRaft?
    public var dispatcher: SwarmSpecDispatcher?
    public var cAConfig: SwarmSpecCAConfig?
    public var encryptionConfig: SwarmSpecEncryptionConfig?
    public var taskDefaults: SwarmSpecTaskDefaults?

    public init(name: String? = nil, labels: [String: String]? = nil, orchestration: SwarmSpecOrchestration? = nil, raft: SwarmSpecRaft? = nil, dispatcher: SwarmSpecDispatcher? = nil, cAConfig: SwarmSpecCAConfig? = nil, encryptionConfig: SwarmSpecEncryptionConfig? = nil, taskDefaults: SwarmSpecTaskDefaults? = nil) {
        self.name = name
        self.labels = labels
        self.orchestration = orchestration
        self.raft = raft
        self.dispatcher = dispatcher
        self.cAConfig = cAConfig
        self.encryptionConfig = encryptionConfig
        self.taskDefaults = taskDefaults
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case labels = "Labels"
        case orchestration = "Orchestration"
        case raft = "Raft"
        case dispatcher = "Dispatcher"
        case cAConfig = "CAConfig"
        case encryptionConfig = "EncryptionConfig"
        case taskDefaults = "TaskDefaults"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(orchestration, forKey: .orchestration)
        try container.encodeIfPresent(raft, forKey: .raft)
        try container.encodeIfPresent(dispatcher, forKey: .dispatcher)
        try container.encodeIfPresent(cAConfig, forKey: .cAConfig)
        try container.encodeIfPresent(encryptionConfig, forKey: .encryptionConfig)
        try container.encodeIfPresent(taskDefaults, forKey: .taskDefaults)
    }
}

