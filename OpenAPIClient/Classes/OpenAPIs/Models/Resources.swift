//
// Resources.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A container&#39;s resources (cgroups config, ulimits, etc) */
public struct Resources: Codable, JSONEncodable, Hashable {

    static let blkioWeightRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 1000, exclusiveMaximum: false, multipleOf: nil)
    static let memorySwappinessRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    /** An integer value representing this container's relative CPU weight versus other containers.  */
    public var cpuShares: Int?
    /** Memory limit in bytes. */
    public var memory: Int64? = 0
    /** Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  */
    public var cgroupParent: String?
    /** Block IO weight (relative weight). */
    public var blkioWeight: Int?
    /** Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ```  */
    public var blkioWeightDevice: [ResourcesBlkioWeightDeviceInner]?
    /** Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceReadBps: [ThrottleDevice]?
    /** Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceWriteBps: [ThrottleDevice]?
    /** Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceReadIOps: [ThrottleDevice]?
    /** Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceWriteIOps: [ThrottleDevice]?
    /** The length of a CPU period in microseconds. */
    public var cpuPeriod: Int64?
    /** Microseconds of CPU time that the container can get in a CPU period.  */
    public var cpuQuota: Int64?
    /** The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  */
    public var cpuRealtimePeriod: Int64?
    /** The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  */
    public var cpuRealtimeRuntime: Int64?
    /** CPUs in which to allow execution (e.g., `0-3`, `0,1`).  */
    public var cpusetCpus: String?
    /** Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  */
    public var cpusetMems: String?
    /** A list of devices to add to the container. */
    public var devices: [DeviceMapping]?
    /** a list of cgroup rules to apply to the container */
    public var deviceCgroupRules: [String]?
    /** A list of requests for devices to be sent to device drivers.  */
    public var deviceRequests: [DeviceRequest]?
    /** Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty.  */
    public var kernelMemoryTCP: Int64?
    /** Memory soft limit in bytes. */
    public var memoryReservation: Int64?
    /** Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  */
    public var memorySwap: Int64?
    /** Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  */
    public var memorySwappiness: Int64?
    /** CPU quota in units of 10<sup>-9</sup> CPUs. */
    public var nanoCpus: Int64?
    /** Disable OOM Killer for the container. */
    public var oomKillDisable: Bool?
    /** Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.  */
    public var _init: Bool?
    /** Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.  */
    public var pidsLimit: Int64?
    /** A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ```  */
    public var ulimits: [ResourcesUlimitsInner]?
    /** The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.  */
    public var cpuCount: Int64?
    /** The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.  */
    public var cpuPercent: Int64?
    /** Maximum IOps for the container system drive (Windows only) */
    public var iOMaximumIOps: Int64?
    /** Maximum IO in bytes per second for the container system drive (Windows only).  */
    public var iOMaximumBandwidth: Int64?

    public init(cpuShares: Int? = nil, memory: Int64? = 0, cgroupParent: String? = nil, blkioWeight: Int? = nil, blkioWeightDevice: [ResourcesBlkioWeightDeviceInner]? = nil, blkioDeviceReadBps: [ThrottleDevice]? = nil, blkioDeviceWriteBps: [ThrottleDevice]? = nil, blkioDeviceReadIOps: [ThrottleDevice]? = nil, blkioDeviceWriteIOps: [ThrottleDevice]? = nil, cpuPeriod: Int64? = nil, cpuQuota: Int64? = nil, cpuRealtimePeriod: Int64? = nil, cpuRealtimeRuntime: Int64? = nil, cpusetCpus: String? = nil, cpusetMems: String? = nil, devices: [DeviceMapping]? = nil, deviceCgroupRules: [String]? = nil, deviceRequests: [DeviceRequest]? = nil, kernelMemoryTCP: Int64? = nil, memoryReservation: Int64? = nil, memorySwap: Int64? = nil, memorySwappiness: Int64? = nil, nanoCpus: Int64? = nil, oomKillDisable: Bool? = nil, _init: Bool? = nil, pidsLimit: Int64? = nil, ulimits: [ResourcesUlimitsInner]? = nil, cpuCount: Int64? = nil, cpuPercent: Int64? = nil, iOMaximumIOps: Int64? = nil, iOMaximumBandwidth: Int64? = nil) {
        self.cpuShares = cpuShares
        self.memory = memory
        self.cgroupParent = cgroupParent
        self.blkioWeight = blkioWeight
        self.blkioWeightDevice = blkioWeightDevice
        self.blkioDeviceReadBps = blkioDeviceReadBps
        self.blkioDeviceWriteBps = blkioDeviceWriteBps
        self.blkioDeviceReadIOps = blkioDeviceReadIOps
        self.blkioDeviceWriteIOps = blkioDeviceWriteIOps
        self.cpuPeriod = cpuPeriod
        self.cpuQuota = cpuQuota
        self.cpuRealtimePeriod = cpuRealtimePeriod
        self.cpuRealtimeRuntime = cpuRealtimeRuntime
        self.cpusetCpus = cpusetCpus
        self.cpusetMems = cpusetMems
        self.devices = devices
        self.deviceCgroupRules = deviceCgroupRules
        self.deviceRequests = deviceRequests
        self.kernelMemoryTCP = kernelMemoryTCP
        self.memoryReservation = memoryReservation
        self.memorySwap = memorySwap
        self.memorySwappiness = memorySwappiness
        self.nanoCpus = nanoCpus
        self.oomKillDisable = oomKillDisable
        self._init = _init
        self.pidsLimit = pidsLimit
        self.ulimits = ulimits
        self.cpuCount = cpuCount
        self.cpuPercent = cpuPercent
        self.iOMaximumIOps = iOMaximumIOps
        self.iOMaximumBandwidth = iOMaximumBandwidth
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cpuShares = "CpuShares"
        case memory = "Memory"
        case cgroupParent = "CgroupParent"
        case blkioWeight = "BlkioWeight"
        case blkioWeightDevice = "BlkioWeightDevice"
        case blkioDeviceReadBps = "BlkioDeviceReadBps"
        case blkioDeviceWriteBps = "BlkioDeviceWriteBps"
        case blkioDeviceReadIOps = "BlkioDeviceReadIOps"
        case blkioDeviceWriteIOps = "BlkioDeviceWriteIOps"
        case cpuPeriod = "CpuPeriod"
        case cpuQuota = "CpuQuota"
        case cpuRealtimePeriod = "CpuRealtimePeriod"
        case cpuRealtimeRuntime = "CpuRealtimeRuntime"
        case cpusetCpus = "CpusetCpus"
        case cpusetMems = "CpusetMems"
        case devices = "Devices"
        case deviceCgroupRules = "DeviceCgroupRules"
        case deviceRequests = "DeviceRequests"
        case kernelMemoryTCP = "KernelMemoryTCP"
        case memoryReservation = "MemoryReservation"
        case memorySwap = "MemorySwap"
        case memorySwappiness = "MemorySwappiness"
        case nanoCpus = "NanoCpus"
        case oomKillDisable = "OomKillDisable"
        case _init = "Init"
        case pidsLimit = "PidsLimit"
        case ulimits = "Ulimits"
        case cpuCount = "CpuCount"
        case cpuPercent = "CpuPercent"
        case iOMaximumIOps = "IOMaximumIOps"
        case iOMaximumBandwidth = "IOMaximumBandwidth"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cpuShares, forKey: .cpuShares)
        try container.encodeIfPresent(memory, forKey: .memory)
        try container.encodeIfPresent(cgroupParent, forKey: .cgroupParent)
        try container.encodeIfPresent(blkioWeight, forKey: .blkioWeight)
        try container.encodeIfPresent(blkioWeightDevice, forKey: .blkioWeightDevice)
        try container.encodeIfPresent(blkioDeviceReadBps, forKey: .blkioDeviceReadBps)
        try container.encodeIfPresent(blkioDeviceWriteBps, forKey: .blkioDeviceWriteBps)
        try container.encodeIfPresent(blkioDeviceReadIOps, forKey: .blkioDeviceReadIOps)
        try container.encodeIfPresent(blkioDeviceWriteIOps, forKey: .blkioDeviceWriteIOps)
        try container.encodeIfPresent(cpuPeriod, forKey: .cpuPeriod)
        try container.encodeIfPresent(cpuQuota, forKey: .cpuQuota)
        try container.encodeIfPresent(cpuRealtimePeriod, forKey: .cpuRealtimePeriod)
        try container.encodeIfPresent(cpuRealtimeRuntime, forKey: .cpuRealtimeRuntime)
        try container.encodeIfPresent(cpusetCpus, forKey: .cpusetCpus)
        try container.encodeIfPresent(cpusetMems, forKey: .cpusetMems)
        try container.encodeIfPresent(devices, forKey: .devices)
        try container.encodeIfPresent(deviceCgroupRules, forKey: .deviceCgroupRules)
        try container.encodeIfPresent(deviceRequests, forKey: .deviceRequests)
        try container.encodeIfPresent(kernelMemoryTCP, forKey: .kernelMemoryTCP)
        try container.encodeIfPresent(memoryReservation, forKey: .memoryReservation)
        try container.encodeIfPresent(memorySwap, forKey: .memorySwap)
        try container.encodeIfPresent(memorySwappiness, forKey: .memorySwappiness)
        try container.encodeIfPresent(nanoCpus, forKey: .nanoCpus)
        try container.encodeIfPresent(oomKillDisable, forKey: .oomKillDisable)
        try container.encodeIfPresent(_init, forKey: ._init)
        try container.encodeIfPresent(pidsLimit, forKey: .pidsLimit)
        try container.encodeIfPresent(ulimits, forKey: .ulimits)
        try container.encodeIfPresent(cpuCount, forKey: .cpuCount)
        try container.encodeIfPresent(cpuPercent, forKey: .cpuPercent)
        try container.encodeIfPresent(iOMaximumIOps, forKey: .iOMaximumIOps)
        try container.encodeIfPresent(iOMaximumBandwidth, forKey: .iOMaximumBandwidth)
    }
}

