//
// Node.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Node: Codable, JSONEncodable, Hashable {

    public var ID: String?
    public var version: ObjectVersion?
    /** Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  */
    public var createdAt: String?
    /** Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  */
    public var updatedAt: String?
    public var spec: NodeSpec?
    public var description: NodeDescription?
    public var status: NodeStatus?
    public var managerStatus: ManagerStatus?

    public init(ID: String? = nil, version: ObjectVersion? = nil, createdAt: String? = nil, updatedAt: String? = nil, spec: NodeSpec? = nil, description: NodeDescription? = nil, status: NodeStatus? = nil, managerStatus: ManagerStatus? = nil) {
        self.ID = ID
        self.version = version
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.spec = spec
        self.description = description
        self.status = status
        self.managerStatus = managerStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ID
        case version = "Version"
        case createdAt = "CreatedAt"
        case updatedAt = "UpdatedAt"
        case spec = "Spec"
        case description = "Description"
        case status = "Status"
        case managerStatus = "ManagerStatus"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ID, forKey: .ID)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(spec, forKey: .spec)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(managerStatus, forKey: .managerStatus)
    }
}

