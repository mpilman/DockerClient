//
// ContainerInspectResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ContainerInspectResponse: Codable, JSONEncodable, Hashable {

    /** The ID of the container */
    public var id: String?
    /** The time the container was created */
    public var created: String?
    /** The path to the command being run */
    public var path: String?
    /** The arguments to the command being run */
    public var args: [String]?
    public var state: ContainerState?
    /** The container's image ID */
    public var image: String?
    public var resolvConfPath: String?
    public var hostnamePath: String?
    public var hostsPath: String?
    public var logPath: String?
    public var name: String?
    public var restartCount: Int?
    public var driver: String?
    public var platform: String?
    public var mountLabel: String?
    public var processLabel: String?
    public var appArmorProfile: String?
    /** IDs of exec instances that are running in the container. */
    public var execIDs: [String]?
    public var hostConfig: HostConfig?
    public var graphDriver: GraphDriverData?
    /** The size of files that have been created or changed by this container.  */
    public var sizeRw: Int64?
    /** The total size of all the files in this container. */
    public var sizeRootFs: Int64?
    public var mounts: [MountPoint]?
    public var config: ContainerConfig?
    public var networkSettings: NetworkSettings?

    public init(id: String? = nil, created: String? = nil, path: String? = nil, args: [String]? = nil, state: ContainerState? = nil, image: String? = nil, resolvConfPath: String? = nil, hostnamePath: String? = nil, hostsPath: String? = nil, logPath: String? = nil, name: String? = nil, restartCount: Int? = nil, driver: String? = nil, platform: String? = nil, mountLabel: String? = nil, processLabel: String? = nil, appArmorProfile: String? = nil, execIDs: [String]? = nil, hostConfig: HostConfig? = nil, graphDriver: GraphDriverData? = nil, sizeRw: Int64? = nil, sizeRootFs: Int64? = nil, mounts: [MountPoint]? = nil, config: ContainerConfig? = nil, networkSettings: NetworkSettings? = nil) {
        self.id = id
        self.created = created
        self.path = path
        self.args = args
        self.state = state
        self.image = image
        self.resolvConfPath = resolvConfPath
        self.hostnamePath = hostnamePath
        self.hostsPath = hostsPath
        self.logPath = logPath
        self.name = name
        self.restartCount = restartCount
        self.driver = driver
        self.platform = platform
        self.mountLabel = mountLabel
        self.processLabel = processLabel
        self.appArmorProfile = appArmorProfile
        self.execIDs = execIDs
        self.hostConfig = hostConfig
        self.graphDriver = graphDriver
        self.sizeRw = sizeRw
        self.sizeRootFs = sizeRootFs
        self.mounts = mounts
        self.config = config
        self.networkSettings = networkSettings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case created = "Created"
        case path = "Path"
        case args = "Args"
        case state = "State"
        case image = "Image"
        case resolvConfPath = "ResolvConfPath"
        case hostnamePath = "HostnamePath"
        case hostsPath = "HostsPath"
        case logPath = "LogPath"
        case name = "Name"
        case restartCount = "RestartCount"
        case driver = "Driver"
        case platform = "Platform"
        case mountLabel = "MountLabel"
        case processLabel = "ProcessLabel"
        case appArmorProfile = "AppArmorProfile"
        case execIDs = "ExecIDs"
        case hostConfig = "HostConfig"
        case graphDriver = "GraphDriver"
        case sizeRw = "SizeRw"
        case sizeRootFs = "SizeRootFs"
        case mounts = "Mounts"
        case config = "Config"
        case networkSettings = "NetworkSettings"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(args, forKey: .args)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(resolvConfPath, forKey: .resolvConfPath)
        try container.encodeIfPresent(hostnamePath, forKey: .hostnamePath)
        try container.encodeIfPresent(hostsPath, forKey: .hostsPath)
        try container.encodeIfPresent(logPath, forKey: .logPath)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(restartCount, forKey: .restartCount)
        try container.encodeIfPresent(driver, forKey: .driver)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(mountLabel, forKey: .mountLabel)
        try container.encodeIfPresent(processLabel, forKey: .processLabel)
        try container.encodeIfPresent(appArmorProfile, forKey: .appArmorProfile)
        try container.encodeIfPresent(execIDs, forKey: .execIDs)
        try container.encodeIfPresent(hostConfig, forKey: .hostConfig)
        try container.encodeIfPresent(graphDriver, forKey: .graphDriver)
        try container.encodeIfPresent(sizeRw, forKey: .sizeRw)
        try container.encodeIfPresent(sizeRootFs, forKey: .sizeRootFs)
        try container.encodeIfPresent(mounts, forKey: .mounts)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(networkSettings, forKey: .networkSettings)
    }
}

