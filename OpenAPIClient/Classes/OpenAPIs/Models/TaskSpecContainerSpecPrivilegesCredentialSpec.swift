//
// TaskSpecContainerSpecPrivilegesCredentialSpec.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CredentialSpec for managed service account (Windows only) */
public struct TaskSpecContainerSpecPrivilegesCredentialSpec: Codable, JSONEncodable, Hashable {

    /** Load credential spec from a Swarm Config with the given ID. The specified config must also be present in the Configs field with the Runtime property set.  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive.  */
    public var config: String?
    /** Load credential spec from this file. The file is read by the daemon, and must be present in the `CredentialSpecs` subdirectory in the docker data directory, which defaults to `C:\\ProgramData\\Docker\\` on Windows.  For example, specifying `spec.json` loads `C:\\ProgramData\\Docker\\CredentialSpecs\\spec.json`.  <p><br /></p>  > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive.  */
    public var file: String?
    /** Load credential spec from this value in the Windows registry. The specified registry value must be located in:  `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive.  */
    public var registry: String?

    public init(config: String? = nil, file: String? = nil, registry: String? = nil) {
        self.config = config
        self.file = file
        self.registry = registry
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case config = "Config"
        case file = "File"
        case registry = "Registry"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(file, forKey: .file)
        try container.encodeIfPresent(registry, forKey: .registry)
    }
}

