//
// TaskSpecContainerSpecSecretsInnerFile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** File represents a specific target that is backed by a file.  */
public struct TaskSpecContainerSpecSecretsInnerFile: Codable, JSONEncodable, Hashable {

    /** Name represents the final filename in the filesystem.  */
    public var name: String?
    /** UID represents the file UID. */
    public var UID: String?
    /** GID represents the file GID. */
    public var GID: String?
    /** Mode represents the FileMode of the file. */
    public var mode: Int?

    public init(name: String? = nil, UID: String? = nil, GID: String? = nil, mode: Int? = nil) {
        self.name = name
        self.UID = UID
        self.GID = GID
        self.mode = mode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case UID
        case GID
        case mode = "Mode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(UID, forKey: .UID)
        try container.encodeIfPresent(GID, forKey: .GID)
        try container.encodeIfPresent(mode, forKey: .mode)
    }
}

