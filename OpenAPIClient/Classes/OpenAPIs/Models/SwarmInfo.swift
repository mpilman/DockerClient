//
// SwarmInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents generic information about swarm.  */
public struct SwarmInfo: Codable, JSONEncodable, Hashable {

    /** Unique identifier of for this node in the swarm. */
    public var nodeID: String? = ""
    /** IP address at which this node can be reached by other nodes in the swarm.  */
    public var nodeAddr: String? = ""
    public var localNodeState: LocalNodeState?
    public var controlAvailable: Bool? = false
    public var error: String? = ""
    /** List of ID's and addresses of other managers in the swarm.  */
    public var remoteManagers: [PeerNode]?
    /** Total number of nodes in the swarm. */
    public var nodes: Int?
    /** Total number of managers in the swarm. */
    public var managers: Int?
    public var cluster: ClusterInfo?

    public init(nodeID: String? = "", nodeAddr: String? = "", localNodeState: LocalNodeState? = nil, controlAvailable: Bool? = false, error: String? = "", remoteManagers: [PeerNode]? = nil, nodes: Int? = nil, managers: Int? = nil, cluster: ClusterInfo? = nil) {
        self.nodeID = nodeID
        self.nodeAddr = nodeAddr
        self.localNodeState = localNodeState
        self.controlAvailable = controlAvailable
        self.error = error
        self.remoteManagers = remoteManagers
        self.nodes = nodes
        self.managers = managers
        self.cluster = cluster
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nodeID = "NodeID"
        case nodeAddr = "NodeAddr"
        case localNodeState = "LocalNodeState"
        case controlAvailable = "ControlAvailable"
        case error = "Error"
        case remoteManagers = "RemoteManagers"
        case nodes = "Nodes"
        case managers = "Managers"
        case cluster = "Cluster"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nodeID, forKey: .nodeID)
        try container.encodeIfPresent(nodeAddr, forKey: .nodeAddr)
        try container.encodeIfPresent(localNodeState, forKey: .localNodeState)
        try container.encodeIfPresent(controlAvailable, forKey: .controlAvailable)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(remoteManagers, forKey: .remoteManagers)
        try container.encodeIfPresent(nodes, forKey: .nodes)
        try container.encodeIfPresent(managers, forKey: .managers)
        try container.encodeIfPresent(cluster, forKey: .cluster)
    }
}

