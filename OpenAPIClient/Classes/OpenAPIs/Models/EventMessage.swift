//
// EventMessage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** EventMessage represents the information an event contains.  */
public struct EventMessage: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case builder = "builder"
        case config = "config"
        case container = "container"
        case daemon = "daemon"
        case image = "image"
        case network = "network"
        case node = "node"
        case plugin = "plugin"
        case secret = "secret"
        case service = "service"
        case volume = "volume"
    }
    public enum Scope: String, Codable, CaseIterable {
        case local = "local"
        case swarm = "swarm"
    }
    /** The type of object emitting the event */
    public var type: ModelType?
    /** The type of event */
    public var action: String?
    public var actor: EventActor?
    /** Scope of the event. Engine events are `local` scope. Cluster (Swarm) events are `swarm` scope.  */
    public var scope: Scope?
    /** Timestamp of event */
    public var time: Int64?
    /** Timestamp of event, with nanosecond accuracy */
    public var timeNano: Int64?

    public init(type: ModelType? = nil, action: String? = nil, actor: EventActor? = nil, scope: Scope? = nil, time: Int64? = nil, timeNano: Int64? = nil) {
        self.type = type
        self.action = action
        self.actor = actor
        self.scope = scope
        self.time = time
        self.timeNano = timeNano
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type = "Type"
        case action = "Action"
        case actor = "Actor"
        case scope
        case time
        case timeNano
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(actor, forKey: .actor)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(timeNano, forKey: .timeNano)
    }
}

