//
// EndpointPortConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EndpointPortConfig: Codable, JSONEncodable, Hashable {

    public enum ModelProtocol: String, Codable, CaseIterable {
        case tcp = "tcp"
        case udp = "udp"
        case sctp = "sctp"
    }
    public enum PublishMode: String, Codable, CaseIterable {
        case ingress = "ingress"
        case host = "host"
    }
    public var name: String?
    public var _protocol: ModelProtocol?
    /** The port inside the container. */
    public var targetPort: Int?
    /** The port on the swarm hosts. */
    public var publishedPort: Int?
    /** The mode in which port is published.  <p><br /></p>  - \"ingress\" makes the target port accessible on every node,   regardless of whether there is a task for the service running on   that node or not. - \"host\" bypasses the routing mesh and publish the port directly on   the swarm node where that service is running.  */
    public var publishMode: PublishMode? = .ingress

    public init(name: String? = nil, _protocol: ModelProtocol? = nil, targetPort: Int? = nil, publishedPort: Int? = nil, publishMode: PublishMode? = .ingress) {
        self.name = name
        self._protocol = _protocol
        self.targetPort = targetPort
        self.publishedPort = publishedPort
        self.publishMode = publishMode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case _protocol = "Protocol"
        case targetPort = "TargetPort"
        case publishedPort = "PublishedPort"
        case publishMode = "PublishMode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(_protocol, forKey: ._protocol)
        try container.encodeIfPresent(targetPort, forKey: .targetPort)
        try container.encodeIfPresent(publishedPort, forKey: .publishedPort)
        try container.encodeIfPresent(publishMode, forKey: .publishMode)
    }
}

