//
// EndpointSettings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Configuration for a network endpoint. */
public struct EndpointSettings: Codable, JSONEncodable, Hashable {

    public var iPAMConfig: EndpointIPAMConfig?
    public var links: [String]?
    public var aliases: [String]?
    /** Unique ID of the network.  */
    public var networkID: String?
    /** Unique ID for the service endpoint in a Sandbox.  */
    public var endpointID: String?
    /** Gateway address for this network.  */
    public var gateway: String?
    /** IPv4 address.  */
    public var iPAddress: String?
    /** Mask length of the IPv4 address.  */
    public var iPPrefixLen: Int?
    /** IPv6 gateway address.  */
    public var iPv6Gateway: String?
    /** Global IPv6 address.  */
    public var globalIPv6Address: String?
    /** Mask length of the global IPv6 address.  */
    public var globalIPv6PrefixLen: Int64?
    /** MAC address for the endpoint on this network.  */
    public var macAddress: String?
    /** DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific.  */
    public var driverOpts: [String: String]?

    public init(iPAMConfig: EndpointIPAMConfig? = nil, links: [String]? = nil, aliases: [String]? = nil, networkID: String? = nil, endpointID: String? = nil, gateway: String? = nil, iPAddress: String? = nil, iPPrefixLen: Int? = nil, iPv6Gateway: String? = nil, globalIPv6Address: String? = nil, globalIPv6PrefixLen: Int64? = nil, macAddress: String? = nil, driverOpts: [String: String]? = nil) {
        self.iPAMConfig = iPAMConfig
        self.links = links
        self.aliases = aliases
        self.networkID = networkID
        self.endpointID = endpointID
        self.gateway = gateway
        self.iPAddress = iPAddress
        self.iPPrefixLen = iPPrefixLen
        self.iPv6Gateway = iPv6Gateway
        self.globalIPv6Address = globalIPv6Address
        self.globalIPv6PrefixLen = globalIPv6PrefixLen
        self.macAddress = macAddress
        self.driverOpts = driverOpts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case iPAMConfig = "IPAMConfig"
        case links = "Links"
        case aliases = "Aliases"
        case networkID = "NetworkID"
        case endpointID = "EndpointID"
        case gateway = "Gateway"
        case iPAddress = "IPAddress"
        case iPPrefixLen = "IPPrefixLen"
        case iPv6Gateway = "IPv6Gateway"
        case globalIPv6Address = "GlobalIPv6Address"
        case globalIPv6PrefixLen = "GlobalIPv6PrefixLen"
        case macAddress = "MacAddress"
        case driverOpts = "DriverOpts"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(iPAMConfig, forKey: .iPAMConfig)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(aliases, forKey: .aliases)
        try container.encodeIfPresent(networkID, forKey: .networkID)
        try container.encodeIfPresent(endpointID, forKey: .endpointID)
        try container.encodeIfPresent(gateway, forKey: .gateway)
        try container.encodeIfPresent(iPAddress, forKey: .iPAddress)
        try container.encodeIfPresent(iPPrefixLen, forKey: .iPPrefixLen)
        try container.encodeIfPresent(iPv6Gateway, forKey: .iPv6Gateway)
        try container.encodeIfPresent(globalIPv6Address, forKey: .globalIPv6Address)
        try container.encodeIfPresent(globalIPv6PrefixLen, forKey: .globalIPv6PrefixLen)
        try container.encodeIfPresent(macAddress, forKey: .macAddress)
        try container.encodeIfPresent(driverOpts, forKey: .driverOpts)
    }
}

