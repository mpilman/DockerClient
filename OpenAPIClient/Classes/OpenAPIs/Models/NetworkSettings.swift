//
// NetworkSettings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** NetworkSettings exposes the network settings in the API */
public struct NetworkSettings: Codable, JSONEncodable, Hashable {

    /** Name of the network's bridge (for example, `docker0`). */
    public var bridge: String?
    /** SandboxID uniquely represents a container's network stack. */
    public var sandboxID: String?
    /** Indicates if hairpin NAT should be enabled on the virtual interface.  */
    public var hairpinMode: Bool?
    /** IPv6 unicast address using the link-local prefix. */
    public var linkLocalIPv6Address: String?
    /** Prefix length of the IPv6 unicast address. */
    public var linkLocalIPv6PrefixLen: Int?
    /** PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table.  */
    public var ports: [String: [PortBinding]]?
    /** SandboxKey identifies the sandbox */
    public var sandboxKey: String?
    /**  */
    public var secondaryIPAddresses: [Address]?
    /**  */
    public var secondaryIPv6Addresses: [Address]?
    /** EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var endpointID: String?
    /** Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var gateway: String?
    /** Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var globalIPv6Address: String?
    /** Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var globalIPv6PrefixLen: Int?
    /** IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var iPAddress: String?
    /** Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var iPPrefixLen: Int?
    /** IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var iPv6Gateway: String?
    /** MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0  */
    public var macAddress: String?
    /** Information about all networks that the container is connected to.  */
    public var networks: [String: EndpointSettings]?

    public init(bridge: String? = nil, sandboxID: String? = nil, hairpinMode: Bool? = nil, linkLocalIPv6Address: String? = nil, linkLocalIPv6PrefixLen: Int? = nil, ports: [String: [PortBinding]]? = nil, sandboxKey: String? = nil, secondaryIPAddresses: [Address]? = nil, secondaryIPv6Addresses: [Address]? = nil, endpointID: String? = nil, gateway: String? = nil, globalIPv6Address: String? = nil, globalIPv6PrefixLen: Int? = nil, iPAddress: String? = nil, iPPrefixLen: Int? = nil, iPv6Gateway: String? = nil, macAddress: String? = nil, networks: [String: EndpointSettings]? = nil) {
        self.bridge = bridge
        self.sandboxID = sandboxID
        self.hairpinMode = hairpinMode
        self.linkLocalIPv6Address = linkLocalIPv6Address
        self.linkLocalIPv6PrefixLen = linkLocalIPv6PrefixLen
        self.ports = ports
        self.sandboxKey = sandboxKey
        self.secondaryIPAddresses = secondaryIPAddresses
        self.secondaryIPv6Addresses = secondaryIPv6Addresses
        self.endpointID = endpointID
        self.gateway = gateway
        self.globalIPv6Address = globalIPv6Address
        self.globalIPv6PrefixLen = globalIPv6PrefixLen
        self.iPAddress = iPAddress
        self.iPPrefixLen = iPPrefixLen
        self.iPv6Gateway = iPv6Gateway
        self.macAddress = macAddress
        self.networks = networks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bridge = "Bridge"
        case sandboxID = "SandboxID"
        case hairpinMode = "HairpinMode"
        case linkLocalIPv6Address = "LinkLocalIPv6Address"
        case linkLocalIPv6PrefixLen = "LinkLocalIPv6PrefixLen"
        case ports = "Ports"
        case sandboxKey = "SandboxKey"
        case secondaryIPAddresses = "SecondaryIPAddresses"
        case secondaryIPv6Addresses = "SecondaryIPv6Addresses"
        case endpointID = "EndpointID"
        case gateway = "Gateway"
        case globalIPv6Address = "GlobalIPv6Address"
        case globalIPv6PrefixLen = "GlobalIPv6PrefixLen"
        case iPAddress = "IPAddress"
        case iPPrefixLen = "IPPrefixLen"
        case iPv6Gateway = "IPv6Gateway"
        case macAddress = "MacAddress"
        case networks = "Networks"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bridge, forKey: .bridge)
        try container.encodeIfPresent(sandboxID, forKey: .sandboxID)
        try container.encodeIfPresent(hairpinMode, forKey: .hairpinMode)
        try container.encodeIfPresent(linkLocalIPv6Address, forKey: .linkLocalIPv6Address)
        try container.encodeIfPresent(linkLocalIPv6PrefixLen, forKey: .linkLocalIPv6PrefixLen)
        try container.encodeIfPresent(ports, forKey: .ports)
        try container.encodeIfPresent(sandboxKey, forKey: .sandboxKey)
        try container.encodeIfPresent(secondaryIPAddresses, forKey: .secondaryIPAddresses)
        try container.encodeIfPresent(secondaryIPv6Addresses, forKey: .secondaryIPv6Addresses)
        try container.encodeIfPresent(endpointID, forKey: .endpointID)
        try container.encodeIfPresent(gateway, forKey: .gateway)
        try container.encodeIfPresent(globalIPv6Address, forKey: .globalIPv6Address)
        try container.encodeIfPresent(globalIPv6PrefixLen, forKey: .globalIPv6PrefixLen)
        try container.encodeIfPresent(iPAddress, forKey: .iPAddress)
        try container.encodeIfPresent(iPPrefixLen, forKey: .iPPrefixLen)
        try container.encodeIfPresent(iPv6Gateway, forKey: .iPv6Gateway)
        try container.encodeIfPresent(macAddress, forKey: .macAddress)
        try container.encodeIfPresent(networks, forKey: .networks)
    }
}

