//
// Health.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Health stores information about the container&#39;s healthcheck results.  */
public struct Health: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case _none = "none"
        case starting = "starting"
        case healthy = "healthy"
        case unhealthy = "unhealthy"
    }
    /** Status is one of `none`, `starting`, `healthy` or `unhealthy`  - \"none\"      Indicates there is no healthcheck - \"starting\"  Starting indicates that the container is not yet ready - \"healthy\"   Healthy indicates that the container is running correctly - \"unhealthy\" Unhealthy indicates that the container has a problem  */
    public var status: Status?
    /** FailingStreak is the number of consecutive failures */
    public var failingStreak: Int?
    /** Log contains the last few results (oldest first)  */
    public var log: [HealthcheckResult]?

    public init(status: Status? = nil, failingStreak: Int? = nil, log: [HealthcheckResult]? = nil) {
        self.status = status
        self.failingStreak = failingStreak
        self.log = log
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status = "Status"
        case failingStreak = "FailingStreak"
        case log = "Log"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(failingStreak, forKey: .failingStreak)
        try container.encodeIfPresent(log, forKey: .log)
    }
}

