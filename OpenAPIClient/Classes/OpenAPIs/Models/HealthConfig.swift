//
// HealthConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A test to perform to check that the container is healthy. */
public struct HealthConfig: Codable, JSONEncodable, Hashable {

    /** The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system's default shell  */
    public var test: [String]?
    /** The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  */
    public var interval: Int64?
    /** The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  */
    public var timeout: Int64?
    /** The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.  */
    public var retries: Int?
    /** Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  */
    public var startPeriod: Int64?

    public init(test: [String]? = nil, interval: Int64? = nil, timeout: Int64? = nil, retries: Int? = nil, startPeriod: Int64? = nil) {
        self.test = test
        self.interval = interval
        self.timeout = timeout
        self.retries = retries
        self.startPeriod = startPeriod
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case test = "Test"
        case interval = "Interval"
        case timeout = "Timeout"
        case retries = "Retries"
        case startPeriod = "StartPeriod"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(test, forKey: .test)
        try container.encodeIfPresent(interval, forKey: .interval)
        try container.encodeIfPresent(timeout, forKey: .timeout)
        try container.encodeIfPresent(retries, forKey: .retries)
        try container.encodeIfPresent(startPeriod, forKey: .startPeriod)
    }
}

