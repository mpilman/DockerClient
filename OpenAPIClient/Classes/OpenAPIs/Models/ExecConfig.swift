//
// ExecConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExecConfig: Codable, JSONEncodable, Hashable {

    /** Attach to `stdin` of the exec command. */
    public var attachStdin: Bool?
    /** Attach to `stdout` of the exec command. */
    public var attachStdout: Bool?
    /** Attach to `stderr` of the exec command. */
    public var attachStderr: Bool?
    /** Initial console size, as an `[height, width]` array. */
    public var consoleSize: [Int]?
    /** Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.  */
    public var detachKeys: String?
    /** Allocate a pseudo-TTY. */
    public var tty: Bool?
    /** A list of environment variables in the form `[\"VAR=value\", ...]`.  */
    public var env: [String]?
    /** Command to run, as a string or array of strings. */
    public var cmd: [String]?
    /** Runs the exec process with extended privileges. */
    public var privileged: Bool? = false
    /** The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`.  */
    public var user: String?
    /** The working directory for the exec process inside the container.  */
    public var workingDir: String?

    public init(attachStdin: Bool? = nil, attachStdout: Bool? = nil, attachStderr: Bool? = nil, consoleSize: [Int]? = nil, detachKeys: String? = nil, tty: Bool? = nil, env: [String]? = nil, cmd: [String]? = nil, privileged: Bool? = false, user: String? = nil, workingDir: String? = nil) {
        self.attachStdin = attachStdin
        self.attachStdout = attachStdout
        self.attachStderr = attachStderr
        self.consoleSize = consoleSize
        self.detachKeys = detachKeys
        self.tty = tty
        self.env = env
        self.cmd = cmd
        self.privileged = privileged
        self.user = user
        self.workingDir = workingDir
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attachStdin = "AttachStdin"
        case attachStdout = "AttachStdout"
        case attachStderr = "AttachStderr"
        case consoleSize = "ConsoleSize"
        case detachKeys = "DetachKeys"
        case tty = "Tty"
        case env = "Env"
        case cmd = "Cmd"
        case privileged = "Privileged"
        case user = "User"
        case workingDir = "WorkingDir"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attachStdin, forKey: .attachStdin)
        try container.encodeIfPresent(attachStdout, forKey: .attachStdout)
        try container.encodeIfPresent(attachStderr, forKey: .attachStderr)
        try container.encodeIfPresent(consoleSize, forKey: .consoleSize)
        try container.encodeIfPresent(detachKeys, forKey: .detachKeys)
        try container.encodeIfPresent(tty, forKey: .tty)
        try container.encodeIfPresent(env, forKey: .env)
        try container.encodeIfPresent(cmd, forKey: .cmd)
        try container.encodeIfPresent(privileged, forKey: .privileged)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(workingDir, forKey: .workingDir)
    }
}

