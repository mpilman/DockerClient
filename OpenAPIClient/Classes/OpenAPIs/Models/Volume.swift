//
// Volume.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Volume: Codable, JSONEncodable, Hashable {

    public enum Scope: String, Codable, CaseIterable {
        case local = "local"
        case global = "global"
    }
    /** Name of the volume. */
    public var name: String
    /** Name of the volume driver used by the volume. */
    public var driver: String
    /** Mount path of the volume on the host. */
    public var mountpoint: String
    /** Date/Time the volume was created. */
    public var createdAt: String?
    /** Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature.  */
    public var status: [String: AnyCodable]?
    /** User-defined key/value metadata. */
    public var labels: [String: String]
    /** The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.  */
    public var scope: Scope = .local
    public var clusterVolume: ClusterVolume?
    /** The driver specific options used when creating the volume.  */
    public var options: [String: String]
    public var usageData: VolumeUsageData?

    public init(name: String, driver: String, mountpoint: String, createdAt: String? = nil, status: [String: AnyCodable]? = nil, labels: [String: String], scope: Scope = .local, clusterVolume: ClusterVolume? = nil, options: [String: String], usageData: VolumeUsageData? = nil) {
        self.name = name
        self.driver = driver
        self.mountpoint = mountpoint
        self.createdAt = createdAt
        self.status = status
        self.labels = labels
        self.scope = scope
        self.clusterVolume = clusterVolume
        self.options = options
        self.usageData = usageData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case driver = "Driver"
        case mountpoint = "Mountpoint"
        case createdAt = "CreatedAt"
        case status = "Status"
        case labels = "Labels"
        case scope = "Scope"
        case clusterVolume = "ClusterVolume"
        case options = "Options"
        case usageData = "UsageData"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(driver, forKey: .driver)
        try container.encode(mountpoint, forKey: .mountpoint)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encode(labels, forKey: .labels)
        try container.encode(scope, forKey: .scope)
        try container.encodeIfPresent(clusterVolume, forKey: .clusterVolume)
        try container.encode(options, forKey: .options)
        try container.encodeIfPresent(usageData, forKey: .usageData)
    }
}

