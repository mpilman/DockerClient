//
// TaskSpecContainerSpecConfigsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TaskSpecContainerSpecConfigsInner: Codable, JSONEncodable, Hashable {

    public var file: TaskSpecContainerSpecConfigsInnerFile?
    /** Runtime represents a target that is not mounted into the container but is used by the task  <p><br /><p>  > **Note**: `Configs.File` and `Configs.Runtime` are mutually > exclusive  */
    public var runtime: AnyCodable?
    /** ConfigID represents the ID of the specific config that we're referencing.  */
    public var configID: String?
    /** ConfigName is the name of the config that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID.  */
    public var configName: String?

    public init(file: TaskSpecContainerSpecConfigsInnerFile? = nil, runtime: AnyCodable? = nil, configID: String? = nil, configName: String? = nil) {
        self.file = file
        self.runtime = runtime
        self.configID = configID
        self.configName = configName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case file = "File"
        case runtime = "Runtime"
        case configID = "ConfigID"
        case configName = "ConfigName"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(file, forKey: .file)
        try container.encodeIfPresent(runtime, forKey: .runtime)
        try container.encodeIfPresent(configID, forKey: .configID)
        try container.encodeIfPresent(configName, forKey: .configName)
    }
}

