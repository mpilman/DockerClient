//
// BuildCache.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** BuildCache contains information about a build cache record.  */
public struct BuildCache: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case _internal = "internal"
        case frontend = "frontend"
        case sourcePeriodLocal = "source.local"
        case sourcePeriodGitPeriodCheckout = "source.git.checkout"
        case execPeriodCachemount = "exec.cachemount"
        case regular = "regular"
    }
    /** Unique ID of the build cache record.  */
    public var ID: String?
    /** ID of the parent build cache record.  > **Deprecated**: This field is deprecated, and omitted if empty.  */
    public var parent: String?
    /** List of parent build cache record IDs.  */
    public var parents: [String]?
    /** Cache record type.  */
    public var type: ModelType?
    /** Description of the build-step that produced the build cache.  */
    public var description: String?
    /** Indicates if the build cache is in use.  */
    public var inUse: Bool?
    /** Indicates if the build cache is shared.  */
    public var shared: Bool?
    /** Amount of disk space used by the build cache (in bytes).  */
    public var size: Int?
    /** Date and time at which the build cache was created in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  */
    public var createdAt: String?
    /** Date and time at which the build cache was last used in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  */
    public var lastUsedAt: String?
    public var usageCount: Int?

    public init(ID: String? = nil, parent: String? = nil, parents: [String]? = nil, type: ModelType? = nil, description: String? = nil, inUse: Bool? = nil, shared: Bool? = nil, size: Int? = nil, createdAt: String? = nil, lastUsedAt: String? = nil, usageCount: Int? = nil) {
        self.ID = ID
        self.parent = parent
        self.parents = parents
        self.type = type
        self.description = description
        self.inUse = inUse
        self.shared = shared
        self.size = size
        self.createdAt = createdAt
        self.lastUsedAt = lastUsedAt
        self.usageCount = usageCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ID
        case parent = "Parent"
        case parents = "Parents"
        case type = "Type"
        case description = "Description"
        case inUse = "InUse"
        case shared = "Shared"
        case size = "Size"
        case createdAt = "CreatedAt"
        case lastUsedAt = "LastUsedAt"
        case usageCount = "UsageCount"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ID, forKey: .ID)
        try container.encodeIfPresent(parent, forKey: .parent)
        try container.encodeIfPresent(parents, forKey: .parents)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(inUse, forKey: .inUse)
        try container.encodeIfPresent(shared, forKey: .shared)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(lastUsedAt, forKey: .lastUsedAt)
        try container.encodeIfPresent(usageCount, forKey: .usageCount)
    }
}

