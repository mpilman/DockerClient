//
// TaskSpecPluginSpec.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Plugin spec for the service.  *(Experimental release only.)*  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are &gt; mutually exclusive. PluginSpec is only used when the Runtime field &gt; is set to &#x60;plugin&#x60;. NetworkAttachmentSpec is used when the Runtime &gt; field is set to &#x60;attachment&#x60;.  */
public struct TaskSpecPluginSpec: Codable, JSONEncodable, Hashable {

    /** The name or 'alias' to use for the plugin. */
    public var name: String?
    /** The plugin image reference to use. */
    public var remote: String?
    /** Disable the plugin once scheduled. */
    public var disabled: Bool?
    public var pluginPrivilege: [PluginPrivilege]?

    public init(name: String? = nil, remote: String? = nil, disabled: Bool? = nil, pluginPrivilege: [PluginPrivilege]? = nil) {
        self.name = name
        self.remote = remote
        self.disabled = disabled
        self.pluginPrivilege = pluginPrivilege
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case remote = "Remote"
        case disabled = "Disabled"
        case pluginPrivilege = "PluginPrivilege"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(remote, forKey: .remote)
        try container.encodeIfPresent(disabled, forKey: .disabled)
        try container.encodeIfPresent(pluginPrivilege, forKey: .pluginPrivilege)
    }
}

