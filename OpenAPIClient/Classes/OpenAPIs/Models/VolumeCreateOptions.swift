//
// VolumeCreateOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Volume configuration */
public struct VolumeCreateOptions: Codable, JSONEncodable, Hashable {

    /** The new volume's name. If not specified, Docker generates a name.  */
    public var name: String?
    /** Name of the volume driver to use. */
    public var driver: String? = "local"
    /** A mapping of driver options and values. These options are passed directly to the driver and are driver specific.  */
    public var driverOpts: [String: String]?
    /** User-defined key/value metadata. */
    public var labels: [String: String]?
    public var clusterVolumeSpec: ClusterVolumeSpec?

    public init(name: String? = nil, driver: String? = "local", driverOpts: [String: String]? = nil, labels: [String: String]? = nil, clusterVolumeSpec: ClusterVolumeSpec? = nil) {
        self.name = name
        self.driver = driver
        self.driverOpts = driverOpts
        self.labels = labels
        self.clusterVolumeSpec = clusterVolumeSpec
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case driver = "Driver"
        case driverOpts = "DriverOpts"
        case labels = "Labels"
        case clusterVolumeSpec = "ClusterVolumeSpec"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(driver, forKey: .driver)
        try container.encodeIfPresent(driverOpts, forKey: .driverOpts)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(clusterVolumeSpec, forKey: .clusterVolumeSpec)
    }
}

