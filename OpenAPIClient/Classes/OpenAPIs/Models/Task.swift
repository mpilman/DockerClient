//
// Task.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Task: Codable, JSONEncodable, Hashable {

    /** The ID of the task. */
    public var ID: String?
    public var version: ObjectVersion?
    public var createdAt: String?
    public var updatedAt: String?
    /** Name of the task. */
    public var name: String?
    /** User-defined key/value metadata. */
    public var labels: [String: String]?
    public var spec: TaskSpec?
    /** The ID of the service this task is part of. */
    public var serviceID: String?
    public var slot: Int?
    /** The ID of the node that this task is on. */
    public var nodeID: String?
    /** User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`).  */
    public var assignedGenericResources: [GenericResourcesInner]?
    public var status: TaskStatus?
    public var desiredState: TaskState?
    public var jobIteration: ObjectVersion?

    public init(ID: String? = nil, version: ObjectVersion? = nil, createdAt: String? = nil, updatedAt: String? = nil, name: String? = nil, labels: [String: String]? = nil, spec: TaskSpec? = nil, serviceID: String? = nil, slot: Int? = nil, nodeID: String? = nil, assignedGenericResources: [GenericResourcesInner]? = nil, status: TaskStatus? = nil, desiredState: TaskState? = nil, jobIteration: ObjectVersion? = nil) {
        self.ID = ID
        self.version = version
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.name = name
        self.labels = labels
        self.spec = spec
        self.serviceID = serviceID
        self.slot = slot
        self.nodeID = nodeID
        self.assignedGenericResources = assignedGenericResources
        self.status = status
        self.desiredState = desiredState
        self.jobIteration = jobIteration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ID
        case version = "Version"
        case createdAt = "CreatedAt"
        case updatedAt = "UpdatedAt"
        case name = "Name"
        case labels = "Labels"
        case spec = "Spec"
        case serviceID = "ServiceID"
        case slot = "Slot"
        case nodeID = "NodeID"
        case assignedGenericResources = "AssignedGenericResources"
        case status = "Status"
        case desiredState = "DesiredState"
        case jobIteration = "JobIteration"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ID, forKey: .ID)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(spec, forKey: .spec)
        try container.encodeIfPresent(serviceID, forKey: .serviceID)
        try container.encodeIfPresent(slot, forKey: .slot)
        try container.encodeIfPresent(nodeID, forKey: .nodeID)
        try container.encodeIfPresent(assignedGenericResources, forKey: .assignedGenericResources)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(desiredState, forKey: .desiredState)
        try container.encodeIfPresent(jobIteration, forKey: .jobIteration)
    }
}

