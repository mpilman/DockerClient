//
// ServiceUpdateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceUpdateRequest: Codable, JSONEncodable, Hashable {

    /** Name of the service. */
    public var name: String?
    /** User-defined key/value metadata. */
    public var labels: [String: String]?
    public var taskTemplate: TaskSpec?
    public var mode: ServiceSpecMode?
    public var updateConfig: ServiceSpecUpdateConfig?
    public var rollbackConfig: ServiceSpecRollbackConfig?
    /** Specifies which networks the service should attach to. */
    public var networks: [NetworkAttachmentConfig]?
    public var endpointSpec: EndpointSpec?

    public init(name: String? = nil, labels: [String: String]? = nil, taskTemplate: TaskSpec? = nil, mode: ServiceSpecMode? = nil, updateConfig: ServiceSpecUpdateConfig? = nil, rollbackConfig: ServiceSpecRollbackConfig? = nil, networks: [NetworkAttachmentConfig]? = nil, endpointSpec: EndpointSpec? = nil) {
        self.name = name
        self.labels = labels
        self.taskTemplate = taskTemplate
        self.mode = mode
        self.updateConfig = updateConfig
        self.rollbackConfig = rollbackConfig
        self.networks = networks
        self.endpointSpec = endpointSpec
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case labels = "Labels"
        case taskTemplate = "TaskTemplate"
        case mode = "Mode"
        case updateConfig = "UpdateConfig"
        case rollbackConfig = "RollbackConfig"
        case networks = "Networks"
        case endpointSpec = "EndpointSpec"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(taskTemplate, forKey: .taskTemplate)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(updateConfig, forKey: .updateConfig)
        try container.encodeIfPresent(rollbackConfig, forKey: .rollbackConfig)
        try container.encodeIfPresent(networks, forKey: .networks)
        try container.encodeIfPresent(endpointSpec, forKey: .endpointSpec)
    }
}

