//
// ContainerCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ContainerCreateRequest: Codable, JSONEncodable, Hashable {

    /** The hostname to use for the container, as a valid RFC 1123 hostname.  */
    public var hostname: String?
    /** The domain name to use for the container.  */
    public var domainname: String?
    /** The user that commands are run as inside the container. */
    public var user: String?
    /** Whether to attach to `stdin`. */
    public var attachStdin: Bool? = false
    /** Whether to attach to `stdout`. */
    public var attachStdout: Bool? = true
    /** Whether to attach to `stderr`. */
    public var attachStderr: Bool? = true
    /** An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`  */
    public var exposedPorts: [String: AnyCodable]?
    /** Attach standard streams to a TTY, including `stdin` if it is not closed.  */
    public var tty: Bool? = false
    /** Open `stdin` */
    public var openStdin: Bool? = false
    /** Close `stdin` after one attached client disconnects */
    public var stdinOnce: Bool? = false
    /** A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.  */
    public var env: [String]?
    /** Command to run specified as a string or an array of strings.  */
    public var cmd: [String]?
    public var healthcheck: HealthConfig?
    /** Command is already escaped (Windows only) */
    public var argsEscaped: Bool? = false
    /** The name (or reference) of the image to use when creating the container, or which was used when the container was created.  */
    public var image: String?
    /** An object mapping mount point paths inside the container to empty objects.  */
    public var volumes: [String: AnyCodable]?
    /** The working directory for commands to run in. */
    public var workingDir: String?
    /** The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).  */
    public var entrypoint: [String]?
    /** Disable networking for the container. */
    public var networkDisabled: Bool?
    /** MAC address of the container. */
    public var macAddress: String?
    /** `ONBUILD` metadata that were defined in the image's `Dockerfile`.  */
    public var onBuild: [String]?
    /** User-defined key/value metadata. */
    public var labels: [String: String]?
    /** Signal to stop a container as a string or unsigned integer.  */
    public var stopSignal: String?
    /** Timeout to stop a container in seconds. */
    public var stopTimeout: Int?
    /** Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.  */
    public var shell: [String]?
    public var hostConfig: HostConfig?
    public var networkingConfig: NetworkingConfig?

    public init(hostname: String? = nil, domainname: String? = nil, user: String? = nil, attachStdin: Bool? = false, attachStdout: Bool? = true, attachStderr: Bool? = true, exposedPorts: [String: AnyCodable]? = nil, tty: Bool? = false, openStdin: Bool? = false, stdinOnce: Bool? = false, env: [String]? = nil, cmd: [String]? = nil, healthcheck: HealthConfig? = nil, argsEscaped: Bool? = false, image: String? = nil, volumes: [String: AnyCodable]? = nil, workingDir: String? = nil, entrypoint: [String]? = nil, networkDisabled: Bool? = nil, macAddress: String? = nil, onBuild: [String]? = nil, labels: [String: String]? = nil, stopSignal: String? = nil, stopTimeout: Int? = nil, shell: [String]? = nil, hostConfig: HostConfig? = nil, networkingConfig: NetworkingConfig? = nil) {
        self.hostname = hostname
        self.domainname = domainname
        self.user = user
        self.attachStdin = attachStdin
        self.attachStdout = attachStdout
        self.attachStderr = attachStderr
        self.exposedPorts = exposedPorts
        self.tty = tty
        self.openStdin = openStdin
        self.stdinOnce = stdinOnce
        self.env = env
        self.cmd = cmd
        self.healthcheck = healthcheck
        self.argsEscaped = argsEscaped
        self.image = image
        self.volumes = volumes
        self.workingDir = workingDir
        self.entrypoint = entrypoint
        self.networkDisabled = networkDisabled
        self.macAddress = macAddress
        self.onBuild = onBuild
        self.labels = labels
        self.stopSignal = stopSignal
        self.stopTimeout = stopTimeout
        self.shell = shell
        self.hostConfig = hostConfig
        self.networkingConfig = networkingConfig
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hostname = "Hostname"
        case domainname = "Domainname"
        case user = "User"
        case attachStdin = "AttachStdin"
        case attachStdout = "AttachStdout"
        case attachStderr = "AttachStderr"
        case exposedPorts = "ExposedPorts"
        case tty = "Tty"
        case openStdin = "OpenStdin"
        case stdinOnce = "StdinOnce"
        case env = "Env"
        case cmd = "Cmd"
        case healthcheck = "Healthcheck"
        case argsEscaped = "ArgsEscaped"
        case image = "Image"
        case volumes = "Volumes"
        case workingDir = "WorkingDir"
        case entrypoint = "Entrypoint"
        case networkDisabled = "NetworkDisabled"
        case macAddress = "MacAddress"
        case onBuild = "OnBuild"
        case labels = "Labels"
        case stopSignal = "StopSignal"
        case stopTimeout = "StopTimeout"
        case shell = "Shell"
        case hostConfig = "HostConfig"
        case networkingConfig = "NetworkingConfig"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(hostname, forKey: .hostname)
        try container.encodeIfPresent(domainname, forKey: .domainname)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(attachStdin, forKey: .attachStdin)
        try container.encodeIfPresent(attachStdout, forKey: .attachStdout)
        try container.encodeIfPresent(attachStderr, forKey: .attachStderr)
        try container.encodeIfPresent(exposedPorts, forKey: .exposedPorts)
        try container.encodeIfPresent(tty, forKey: .tty)
        try container.encodeIfPresent(openStdin, forKey: .openStdin)
        try container.encodeIfPresent(stdinOnce, forKey: .stdinOnce)
        try container.encodeIfPresent(env, forKey: .env)
        try container.encodeIfPresent(cmd, forKey: .cmd)
        try container.encodeIfPresent(healthcheck, forKey: .healthcheck)
        try container.encodeIfPresent(argsEscaped, forKey: .argsEscaped)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(volumes, forKey: .volumes)
        try container.encodeIfPresent(workingDir, forKey: .workingDir)
        try container.encodeIfPresent(entrypoint, forKey: .entrypoint)
        try container.encodeIfPresent(networkDisabled, forKey: .networkDisabled)
        try container.encodeIfPresent(macAddress, forKey: .macAddress)
        try container.encodeIfPresent(onBuild, forKey: .onBuild)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(stopSignal, forKey: .stopSignal)
        try container.encodeIfPresent(stopTimeout, forKey: .stopTimeout)
        try container.encodeIfPresent(shell, forKey: .shell)
        try container.encodeIfPresent(hostConfig, forKey: .hostConfig)
        try container.encodeIfPresent(networkingConfig, forKey: .networkingConfig)
    }
}

