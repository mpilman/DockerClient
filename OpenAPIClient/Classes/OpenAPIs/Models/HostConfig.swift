//
// HostConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Container configuration that depends on the host we are running on */
public struct HostConfig: Codable, JSONEncodable, Hashable {

    public enum CgroupnsMode: String, Codable, CaseIterable {
        case _private = "private"
        case host = "host"
    }
    public enum Isolation: String, Codable, CaseIterable {
        case _default = "default"
        case process = "process"
        case hyperv = "hyperv"
    }
    static let blkioWeightRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 1000, exclusiveMaximum: false, multipleOf: nil)
    static let memorySwappinessRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    static let shmSizeRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** An integer value representing this container's relative CPU weight versus other containers.  */
    public var cpuShares: Int?
    /** Memory limit in bytes. */
    public var memory: Int64? = 0
    /** Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  */
    public var cgroupParent: String?
    /** Block IO weight (relative weight). */
    public var blkioWeight: Int?
    /** Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ```  */
    public var blkioWeightDevice: [ResourcesBlkioWeightDeviceInner]?
    /** Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceReadBps: [ThrottleDevice]?
    /** Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceWriteBps: [ThrottleDevice]?
    /** Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceReadIOps: [ThrottleDevice]?
    /** Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```  */
    public var blkioDeviceWriteIOps: [ThrottleDevice]?
    /** The length of a CPU period in microseconds. */
    public var cpuPeriod: Int64?
    /** Microseconds of CPU time that the container can get in a CPU period.  */
    public var cpuQuota: Int64?
    /** The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  */
    public var cpuRealtimePeriod: Int64?
    /** The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  */
    public var cpuRealtimeRuntime: Int64?
    /** CPUs in which to allow execution (e.g., `0-3`, `0,1`).  */
    public var cpusetCpus: String?
    /** Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  */
    public var cpusetMems: String?
    /** A list of devices to add to the container. */
    public var devices: [DeviceMapping]?
    /** a list of cgroup rules to apply to the container */
    public var deviceCgroupRules: [String]?
    /** A list of requests for devices to be sent to device drivers.  */
    public var deviceRequests: [DeviceRequest]?
    /** Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty.  */
    public var kernelMemoryTCP: Int64?
    /** Memory soft limit in bytes. */
    public var memoryReservation: Int64?
    /** Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  */
    public var memorySwap: Int64?
    /** Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  */
    public var memorySwappiness: Int64?
    /** CPU quota in units of 10<sup>-9</sup> CPUs. */
    public var nanoCpus: Int64?
    /** Disable OOM Killer for the container. */
    public var oomKillDisable: Bool?
    /** Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.  */
    public var _init: Bool?
    /** Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.  */
    public var pidsLimit: Int64?
    /** A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ```  */
    public var ulimits: [ResourcesUlimitsInner]?
    /** The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.  */
    public var cpuCount: Int64?
    /** The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.  */
    public var cpuPercent: Int64?
    /** Maximum IOps for the container system drive (Windows only) */
    public var iOMaximumIOps: Int64?
    /** Maximum IO in bytes per second for the container system drive (Windows only).  */
    public var iOMaximumBandwidth: Int64?
    /** A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container's processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`.  */
    public var binds: [String]?
    /** Path to a file where the container ID is written */
    public var containerIDFile: String?
    public var logConfig: HostConfigAllOfLogConfig?
    /** Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.  */
    public var networkMode: String?
    /** PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table.  */
    public var portBindings: [String: [PortBinding]]?
    public var restartPolicy: RestartPolicy?
    /** Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.  */
    public var autoRemove: Bool?
    /** Driver that this container uses to mount volumes. */
    public var volumeDriver: String?
    /** A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.  */
    public var volumesFrom: [String]?
    /** Specification for mounts to be added to the container.  */
    public var mounts: [Mount]?
    /** Initial console size, as an `[height, width]` array.  */
    public var consoleSize: [Int]?
    /** A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'.  */
    public var capAdd: [String]?
    /** A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'.  */
    public var capDrop: [String]?
    /** cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration.  */
    public var cgroupnsMode: CgroupnsMode?
    /** A list of DNS servers for the container to use. */
    public var dns: [String]?
    /** A list of DNS options. */
    public var dnsOptions: [String]?
    /** A list of DNS search domains. */
    public var dnsSearch: [String]?
    /** A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.  */
    public var extraHosts: [String]?
    /** A list of additional groups that the container process will run as.  */
    public var groupAdd: [String]?
    /** IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.  */
    public var ipcMode: String?
    /** Cgroup to use for the container. */
    public var cgroup: String?
    /** A list of links for the container in the form `container_name:alias`.  */
    public var links: [String]?
    /** An integer value containing the score given to the container in order to tune OOM killer preferences.  */
    public var oomScoreAdj: Int?
    /** Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container  */
    public var pidMode: String?
    /** Gives the container full access to the host. */
    public var privileged: Bool?
    /** Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.  */
    public var publishAllPorts: Bool?
    /** Mount the container's root filesystem as read only. */
    public var readonlyRootfs: Bool?
    /** A list of string values to customize labels for MLS systems, such as SELinux.  */
    public var securityOpt: [String]?
    /** Storage driver options for this container, in the form `{\"size\": \"120G\"}`.  */
    public var storageOpt: [String: String]?
    /** A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ```  */
    public var tmpfs: [String: String]?
    /** UTS namespace to use for the container. */
    public var uTSMode: String?
    /** Sets the usernamespace mode for the container when usernamespace remapping option is enabled.  */
    public var usernsMode: String?
    /** Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.  */
    public var shmSize: Int64?
    /** A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ```  */
    public var sysctls: [String: String]?
    /** Runtime to use with this container. */
    public var runtime: String?
    /** Isolation technology of the container. (Windows only)  */
    public var isolation: Isolation?
    /** The list of paths to be masked inside the container (this overrides the default set of paths).  */
    public var maskedPaths: [String]?
    /** The list of paths to be set as read-only inside the container (this overrides the default set of paths).  */
    public var readonlyPaths: [String]?

    public init(cpuShares: Int? = nil, memory: Int64? = 0, cgroupParent: String? = nil, blkioWeight: Int? = nil, blkioWeightDevice: [ResourcesBlkioWeightDeviceInner]? = nil, blkioDeviceReadBps: [ThrottleDevice]? = nil, blkioDeviceWriteBps: [ThrottleDevice]? = nil, blkioDeviceReadIOps: [ThrottleDevice]? = nil, blkioDeviceWriteIOps: [ThrottleDevice]? = nil, cpuPeriod: Int64? = nil, cpuQuota: Int64? = nil, cpuRealtimePeriod: Int64? = nil, cpuRealtimeRuntime: Int64? = nil, cpusetCpus: String? = nil, cpusetMems: String? = nil, devices: [DeviceMapping]? = nil, deviceCgroupRules: [String]? = nil, deviceRequests: [DeviceRequest]? = nil, kernelMemoryTCP: Int64? = nil, memoryReservation: Int64? = nil, memorySwap: Int64? = nil, memorySwappiness: Int64? = nil, nanoCpus: Int64? = nil, oomKillDisable: Bool? = nil, _init: Bool? = nil, pidsLimit: Int64? = nil, ulimits: [ResourcesUlimitsInner]? = nil, cpuCount: Int64? = nil, cpuPercent: Int64? = nil, iOMaximumIOps: Int64? = nil, iOMaximumBandwidth: Int64? = nil, binds: [String]? = nil, containerIDFile: String? = nil, logConfig: HostConfigAllOfLogConfig? = nil, networkMode: String? = nil, portBindings: [String: [PortBinding]]? = nil, restartPolicy: RestartPolicy? = nil, autoRemove: Bool? = nil, volumeDriver: String? = nil, volumesFrom: [String]? = nil, mounts: [Mount]? = nil, consoleSize: [Int]? = nil, capAdd: [String]? = nil, capDrop: [String]? = nil, cgroupnsMode: CgroupnsMode? = nil, dns: [String]? = nil, dnsOptions: [String]? = nil, dnsSearch: [String]? = nil, extraHosts: [String]? = nil, groupAdd: [String]? = nil, ipcMode: String? = nil, cgroup: String? = nil, links: [String]? = nil, oomScoreAdj: Int? = nil, pidMode: String? = nil, privileged: Bool? = nil, publishAllPorts: Bool? = nil, readonlyRootfs: Bool? = nil, securityOpt: [String]? = nil, storageOpt: [String: String]? = nil, tmpfs: [String: String]? = nil, uTSMode: String? = nil, usernsMode: String? = nil, shmSize: Int64? = nil, sysctls: [String: String]? = nil, runtime: String? = nil, isolation: Isolation? = nil, maskedPaths: [String]? = nil, readonlyPaths: [String]? = nil) {
        self.cpuShares = cpuShares
        self.memory = memory
        self.cgroupParent = cgroupParent
        self.blkioWeight = blkioWeight
        self.blkioWeightDevice = blkioWeightDevice
        self.blkioDeviceReadBps = blkioDeviceReadBps
        self.blkioDeviceWriteBps = blkioDeviceWriteBps
        self.blkioDeviceReadIOps = blkioDeviceReadIOps
        self.blkioDeviceWriteIOps = blkioDeviceWriteIOps
        self.cpuPeriod = cpuPeriod
        self.cpuQuota = cpuQuota
        self.cpuRealtimePeriod = cpuRealtimePeriod
        self.cpuRealtimeRuntime = cpuRealtimeRuntime
        self.cpusetCpus = cpusetCpus
        self.cpusetMems = cpusetMems
        self.devices = devices
        self.deviceCgroupRules = deviceCgroupRules
        self.deviceRequests = deviceRequests
        self.kernelMemoryTCP = kernelMemoryTCP
        self.memoryReservation = memoryReservation
        self.memorySwap = memorySwap
        self.memorySwappiness = memorySwappiness
        self.nanoCpus = nanoCpus
        self.oomKillDisable = oomKillDisable
        self._init = _init
        self.pidsLimit = pidsLimit
        self.ulimits = ulimits
        self.cpuCount = cpuCount
        self.cpuPercent = cpuPercent
        self.iOMaximumIOps = iOMaximumIOps
        self.iOMaximumBandwidth = iOMaximumBandwidth
        self.binds = binds
        self.containerIDFile = containerIDFile
        self.logConfig = logConfig
        self.networkMode = networkMode
        self.portBindings = portBindings
        self.restartPolicy = restartPolicy
        self.autoRemove = autoRemove
        self.volumeDriver = volumeDriver
        self.volumesFrom = volumesFrom
        self.mounts = mounts
        self.consoleSize = consoleSize
        self.capAdd = capAdd
        self.capDrop = capDrop
        self.cgroupnsMode = cgroupnsMode
        self.dns = dns
        self.dnsOptions = dnsOptions
        self.dnsSearch = dnsSearch
        self.extraHosts = extraHosts
        self.groupAdd = groupAdd
        self.ipcMode = ipcMode
        self.cgroup = cgroup
        self.links = links
        self.oomScoreAdj = oomScoreAdj
        self.pidMode = pidMode
        self.privileged = privileged
        self.publishAllPorts = publishAllPorts
        self.readonlyRootfs = readonlyRootfs
        self.securityOpt = securityOpt
        self.storageOpt = storageOpt
        self.tmpfs = tmpfs
        self.uTSMode = uTSMode
        self.usernsMode = usernsMode
        self.shmSize = shmSize
        self.sysctls = sysctls
        self.runtime = runtime
        self.isolation = isolation
        self.maskedPaths = maskedPaths
        self.readonlyPaths = readonlyPaths
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cpuShares = "CpuShares"
        case memory = "Memory"
        case cgroupParent = "CgroupParent"
        case blkioWeight = "BlkioWeight"
        case blkioWeightDevice = "BlkioWeightDevice"
        case blkioDeviceReadBps = "BlkioDeviceReadBps"
        case blkioDeviceWriteBps = "BlkioDeviceWriteBps"
        case blkioDeviceReadIOps = "BlkioDeviceReadIOps"
        case blkioDeviceWriteIOps = "BlkioDeviceWriteIOps"
        case cpuPeriod = "CpuPeriod"
        case cpuQuota = "CpuQuota"
        case cpuRealtimePeriod = "CpuRealtimePeriod"
        case cpuRealtimeRuntime = "CpuRealtimeRuntime"
        case cpusetCpus = "CpusetCpus"
        case cpusetMems = "CpusetMems"
        case devices = "Devices"
        case deviceCgroupRules = "DeviceCgroupRules"
        case deviceRequests = "DeviceRequests"
        case kernelMemoryTCP = "KernelMemoryTCP"
        case memoryReservation = "MemoryReservation"
        case memorySwap = "MemorySwap"
        case memorySwappiness = "MemorySwappiness"
        case nanoCpus = "NanoCpus"
        case oomKillDisable = "OomKillDisable"
        case _init = "Init"
        case pidsLimit = "PidsLimit"
        case ulimits = "Ulimits"
        case cpuCount = "CpuCount"
        case cpuPercent = "CpuPercent"
        case iOMaximumIOps = "IOMaximumIOps"
        case iOMaximumBandwidth = "IOMaximumBandwidth"
        case binds = "Binds"
        case containerIDFile = "ContainerIDFile"
        case logConfig = "LogConfig"
        case networkMode = "NetworkMode"
        case portBindings = "PortBindings"
        case restartPolicy = "RestartPolicy"
        case autoRemove = "AutoRemove"
        case volumeDriver = "VolumeDriver"
        case volumesFrom = "VolumesFrom"
        case mounts = "Mounts"
        case consoleSize = "ConsoleSize"
        case capAdd = "CapAdd"
        case capDrop = "CapDrop"
        case cgroupnsMode = "CgroupnsMode"
        case dns = "Dns"
        case dnsOptions = "DnsOptions"
        case dnsSearch = "DnsSearch"
        case extraHosts = "ExtraHosts"
        case groupAdd = "GroupAdd"
        case ipcMode = "IpcMode"
        case cgroup = "Cgroup"
        case links = "Links"
        case oomScoreAdj = "OomScoreAdj"
        case pidMode = "PidMode"
        case privileged = "Privileged"
        case publishAllPorts = "PublishAllPorts"
        case readonlyRootfs = "ReadonlyRootfs"
        case securityOpt = "SecurityOpt"
        case storageOpt = "StorageOpt"
        case tmpfs = "Tmpfs"
        case uTSMode = "UTSMode"
        case usernsMode = "UsernsMode"
        case shmSize = "ShmSize"
        case sysctls = "Sysctls"
        case runtime = "Runtime"
        case isolation = "Isolation"
        case maskedPaths = "MaskedPaths"
        case readonlyPaths = "ReadonlyPaths"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cpuShares, forKey: .cpuShares)
        try container.encodeIfPresent(memory, forKey: .memory)
        try container.encodeIfPresent(cgroupParent, forKey: .cgroupParent)
        try container.encodeIfPresent(blkioWeight, forKey: .blkioWeight)
        try container.encodeIfPresent(blkioWeightDevice, forKey: .blkioWeightDevice)
        try container.encodeIfPresent(blkioDeviceReadBps, forKey: .blkioDeviceReadBps)
        try container.encodeIfPresent(blkioDeviceWriteBps, forKey: .blkioDeviceWriteBps)
        try container.encodeIfPresent(blkioDeviceReadIOps, forKey: .blkioDeviceReadIOps)
        try container.encodeIfPresent(blkioDeviceWriteIOps, forKey: .blkioDeviceWriteIOps)
        try container.encodeIfPresent(cpuPeriod, forKey: .cpuPeriod)
        try container.encodeIfPresent(cpuQuota, forKey: .cpuQuota)
        try container.encodeIfPresent(cpuRealtimePeriod, forKey: .cpuRealtimePeriod)
        try container.encodeIfPresent(cpuRealtimeRuntime, forKey: .cpuRealtimeRuntime)
        try container.encodeIfPresent(cpusetCpus, forKey: .cpusetCpus)
        try container.encodeIfPresent(cpusetMems, forKey: .cpusetMems)
        try container.encodeIfPresent(devices, forKey: .devices)
        try container.encodeIfPresent(deviceCgroupRules, forKey: .deviceCgroupRules)
        try container.encodeIfPresent(deviceRequests, forKey: .deviceRequests)
        try container.encodeIfPresent(kernelMemoryTCP, forKey: .kernelMemoryTCP)
        try container.encodeIfPresent(memoryReservation, forKey: .memoryReservation)
        try container.encodeIfPresent(memorySwap, forKey: .memorySwap)
        try container.encodeIfPresent(memorySwappiness, forKey: .memorySwappiness)
        try container.encodeIfPresent(nanoCpus, forKey: .nanoCpus)
        try container.encodeIfPresent(oomKillDisable, forKey: .oomKillDisable)
        try container.encodeIfPresent(_init, forKey: ._init)
        try container.encodeIfPresent(pidsLimit, forKey: .pidsLimit)
        try container.encodeIfPresent(ulimits, forKey: .ulimits)
        try container.encodeIfPresent(cpuCount, forKey: .cpuCount)
        try container.encodeIfPresent(cpuPercent, forKey: .cpuPercent)
        try container.encodeIfPresent(iOMaximumIOps, forKey: .iOMaximumIOps)
        try container.encodeIfPresent(iOMaximumBandwidth, forKey: .iOMaximumBandwidth)
        try container.encodeIfPresent(binds, forKey: .binds)
        try container.encodeIfPresent(containerIDFile, forKey: .containerIDFile)
        try container.encodeIfPresent(logConfig, forKey: .logConfig)
        try container.encodeIfPresent(networkMode, forKey: .networkMode)
        try container.encodeIfPresent(portBindings, forKey: .portBindings)
        try container.encodeIfPresent(restartPolicy, forKey: .restartPolicy)
        try container.encodeIfPresent(autoRemove, forKey: .autoRemove)
        try container.encodeIfPresent(volumeDriver, forKey: .volumeDriver)
        try container.encodeIfPresent(volumesFrom, forKey: .volumesFrom)
        try container.encodeIfPresent(mounts, forKey: .mounts)
        try container.encodeIfPresent(consoleSize, forKey: .consoleSize)
        try container.encodeIfPresent(capAdd, forKey: .capAdd)
        try container.encodeIfPresent(capDrop, forKey: .capDrop)
        try container.encodeIfPresent(cgroupnsMode, forKey: .cgroupnsMode)
        try container.encodeIfPresent(dns, forKey: .dns)
        try container.encodeIfPresent(dnsOptions, forKey: .dnsOptions)
        try container.encodeIfPresent(dnsSearch, forKey: .dnsSearch)
        try container.encodeIfPresent(extraHosts, forKey: .extraHosts)
        try container.encodeIfPresent(groupAdd, forKey: .groupAdd)
        try container.encodeIfPresent(ipcMode, forKey: .ipcMode)
        try container.encodeIfPresent(cgroup, forKey: .cgroup)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(oomScoreAdj, forKey: .oomScoreAdj)
        try container.encodeIfPresent(pidMode, forKey: .pidMode)
        try container.encodeIfPresent(privileged, forKey: .privileged)
        try container.encodeIfPresent(publishAllPorts, forKey: .publishAllPorts)
        try container.encodeIfPresent(readonlyRootfs, forKey: .readonlyRootfs)
        try container.encodeIfPresent(securityOpt, forKey: .securityOpt)
        try container.encodeIfPresent(storageOpt, forKey: .storageOpt)
        try container.encodeIfPresent(tmpfs, forKey: .tmpfs)
        try container.encodeIfPresent(uTSMode, forKey: .uTSMode)
        try container.encodeIfPresent(usernsMode, forKey: .usernsMode)
        try container.encodeIfPresent(shmSize, forKey: .shmSize)
        try container.encodeIfPresent(sysctls, forKey: .sysctls)
        try container.encodeIfPresent(runtime, forKey: .runtime)
        try container.encodeIfPresent(isolation, forKey: .isolation)
        try container.encodeIfPresent(maskedPaths, forKey: .maskedPaths)
        try container.encodeIfPresent(readonlyPaths, forKey: .readonlyPaths)
    }
}

