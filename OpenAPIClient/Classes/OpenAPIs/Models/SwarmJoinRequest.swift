//
// SwarmJoinRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SwarmJoinRequest: Codable, JSONEncodable, Hashable {

    /** Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP).  */
    public var listenAddr: String?
    /** Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible.  */
    public var advertiseAddr: String?
    /** Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster.  */
    public var dataPathAddr: String?
    /** Addresses of manager nodes already participating in the swarm.  */
    public var remoteAddrs: [String]?
    /** Secret token for joining this swarm. */
    public var joinToken: String?

    public init(listenAddr: String? = nil, advertiseAddr: String? = nil, dataPathAddr: String? = nil, remoteAddrs: [String]? = nil, joinToken: String? = nil) {
        self.listenAddr = listenAddr
        self.advertiseAddr = advertiseAddr
        self.dataPathAddr = dataPathAddr
        self.remoteAddrs = remoteAddrs
        self.joinToken = joinToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case listenAddr = "ListenAddr"
        case advertiseAddr = "AdvertiseAddr"
        case dataPathAddr = "DataPathAddr"
        case remoteAddrs = "RemoteAddrs"
        case joinToken = "JoinToken"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(listenAddr, forKey: .listenAddr)
        try container.encodeIfPresent(advertiseAddr, forKey: .advertiseAddr)
        try container.encodeIfPresent(dataPathAddr, forKey: .dataPathAddr)
        try container.encodeIfPresent(remoteAddrs, forKey: .remoteAddrs)
        try container.encodeIfPresent(joinToken, forKey: .joinToken)
    }
}

