//
// SwarmSpecCAConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** CA configuration. */
public struct SwarmSpecCAConfig: Codable, JSONEncodable, Hashable {

    /** The duration node certificates are issued for. */
    public var nodeCertExpiry: Int64?
    /** Configuration for forwarding signing requests to an external certificate authority.  */
    public var externalCAs: [SwarmSpecCAConfigExternalCAsInner]?
    /** The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.  */
    public var signingCACert: String?
    /** The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.  */
    public var signingCAKey: String?
    /** An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey`  */
    public var forceRotate: Int?

    public init(nodeCertExpiry: Int64? = nil, externalCAs: [SwarmSpecCAConfigExternalCAsInner]? = nil, signingCACert: String? = nil, signingCAKey: String? = nil, forceRotate: Int? = nil) {
        self.nodeCertExpiry = nodeCertExpiry
        self.externalCAs = externalCAs
        self.signingCACert = signingCACert
        self.signingCAKey = signingCAKey
        self.forceRotate = forceRotate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nodeCertExpiry = "NodeCertExpiry"
        case externalCAs = "ExternalCAs"
        case signingCACert = "SigningCACert"
        case signingCAKey = "SigningCAKey"
        case forceRotate = "ForceRotate"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nodeCertExpiry, forKey: .nodeCertExpiry)
        try container.encodeIfPresent(externalCAs, forKey: .externalCAs)
        try container.encodeIfPresent(signingCACert, forKey: .signingCACert)
        try container.encodeIfPresent(signingCAKey, forKey: .signingCAKey)
        try container.encodeIfPresent(forceRotate, forKey: .forceRotate)
    }
}

