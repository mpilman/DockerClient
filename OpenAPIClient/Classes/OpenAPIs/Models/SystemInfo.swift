//
// SystemInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SystemInfo: Codable, JSONEncodable, Hashable {

    public enum CgroupDriver: String, Codable, CaseIterable {
        case cgroupfs = "cgroupfs"
        case systemd = "systemd"
        case _none = "none"
    }
    public enum CgroupVersion: String, Codable, CaseIterable {
        case _1 = "1"
        case _2 = "2"
    }
    public enum Isolation: String, Codable, CaseIterable {
        case _default = "default"
        case hyperv = "hyperv"
        case process = "process"
    }
    /** Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable.  */
    public var ID: String?
    /** Total number of containers on the host. */
    public var containers: Int?
    /** Number of containers with status `\"running\"`.  */
    public var containersRunning: Int?
    /** Number of containers with status `\"paused\"`.  */
    public var containersPaused: Int?
    /** Number of containers with status `\"stopped\"`.  */
    public var containersStopped: Int?
    /** Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted.  */
    public var images: Int?
    /** Name of the storage driver in use. */
    public var driver: String?
    /** Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice.  */
    public var driverStatus: [[String]]?
    /** Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.  */
    public var dockerRootDir: String?
    public var plugins: PluginsInfo?
    /** Indicates if the host has memory limit support enabled. */
    public var memoryLimit: Bool?
    /** Indicates if the host has memory swap limit support enabled. */
    public var swapLimit: Bool?
    /** Indicates if the host has kernel memory TCP limit support enabled. This field is omitted if not supported.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.  */
    public var kernelMemoryTCP: Bool?
    /** Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.  */
    public var cpuCfsPeriod: Bool?
    /** Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.  */
    public var cpuCfsQuota: Bool?
    /** Indicates if CPU Shares limiting is supported by the host.  */
    public var cPUShares: Bool?
    /** Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)  */
    public var cPUSet: Bool?
    /** Indicates if the host kernel has PID limit support enabled. */
    public var pidsLimit: Bool?
    /** Indicates if OOM killer disable is supported on the host. */
    public var oomKillDisable: Bool?
    /** Indicates IPv4 forwarding is enabled. */
    public var iPv4Forwarding: Bool?
    /** Indicates if `bridge-nf-call-iptables` is available on the host. */
    public var bridgeNfIptables: Bool?
    /** Indicates if `bridge-nf-call-ip6tables` is available on the host. */
    public var bridgeNfIp6tables: Bool?
    /** Indicates if the daemon is running in debug-mode / with debug-level logging enabled.  */
    public var debug: Bool?
    /** The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.  */
    public var nFd: Int?
    /** The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.  */
    public var nGoroutines: Int?
    /** Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  */
    public var systemTime: String?
    /** The logging driver to use as a default for new containers.  */
    public var loggingDriver: String?
    /** The driver to use for managing cgroups.  */
    public var cgroupDriver: CgroupDriver? = .cgroupfs
    /** The version of the cgroup.  */
    public var cgroupVersion: CgroupVersion? = ._1
    /** Number of event listeners subscribed. */
    public var nEventsListener: Int?
    /** Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.  */
    public var kernelVersion: String?
    /** Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"  */
    public var operatingSystem: String?
    /** Version of the host's operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice.  */
    public var oSVersion: String?
    /** Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).  */
    public var oSType: String?
    /** Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).  */
    public var architecture: String?
    /** The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.  */
    public var NCPU: Int?
    /** Total amount of physical memory available on the host, in bytes.  */
    public var memTotal: Int64?
    /** Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud.  */
    public var indexServerAddress: String? = "https://index.docker.io/v1/"
    public var registryConfig: RegistryServiceConfig?
    /** User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`).  */
    public var genericResources: [GenericResourcesInner]?
    /** HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.  */
    public var httpProxy: String?
    /** HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.  */
    public var httpsProxy: String?
    /** Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.  */
    public var noProxy: String?
    /** Hostname of the host. */
    public var name: String?
    /** User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm.  */
    public var labels: [String]?
    /** Indicates if experimental features are enabled on the daemon.  */
    public var experimentalBuild: Bool?
    /** Version string of the daemon.  > **Note**: the [standalone Swarm API](/swarm/swarm-api/) > returns the Swarm version instead of the daemon  version, for example > `swarm/1.2.8`.  */
    public var serverVersion: String?
    /** URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty.  */
    public var clusterStore: String?
    /** The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty.  */
    public var clusterAdvertise: String?
    /** List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here.  */
    public var runtimes: [String: Runtime]?
    /** Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.  */
    public var defaultRuntime: String? = "runc"
    public var swarm: SwarmInfo?
    /** Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.  */
    public var liveRestoreEnabled: Bool? = false
    /** Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.  */
    public var isolation: Isolation? = ._default
    /** Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.  */
    public var initBinary: String?
    public var containerdCommit: Commit?
    public var runcCommit: Commit?
    public var initCommit: Commit?
    /** List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.  */
    public var securityOptions: [String]?
    /** Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included.  */
    public var productLicense: String?
    /** List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools.  */
    public var defaultAddressPools: [SystemInfoDefaultAddressPoolsInner]?
    /** List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user.  */
    public var warnings: [String]?

    public init(ID: String? = nil, containers: Int? = nil, containersRunning: Int? = nil, containersPaused: Int? = nil, containersStopped: Int? = nil, images: Int? = nil, driver: String? = nil, driverStatus: [[String]]? = nil, dockerRootDir: String? = nil, plugins: PluginsInfo? = nil, memoryLimit: Bool? = nil, swapLimit: Bool? = nil, kernelMemoryTCP: Bool? = nil, cpuCfsPeriod: Bool? = nil, cpuCfsQuota: Bool? = nil, cPUShares: Bool? = nil, cPUSet: Bool? = nil, pidsLimit: Bool? = nil, oomKillDisable: Bool? = nil, iPv4Forwarding: Bool? = nil, bridgeNfIptables: Bool? = nil, bridgeNfIp6tables: Bool? = nil, debug: Bool? = nil, nFd: Int? = nil, nGoroutines: Int? = nil, systemTime: String? = nil, loggingDriver: String? = nil, cgroupDriver: CgroupDriver? = .cgroupfs, cgroupVersion: CgroupVersion? = ._1, nEventsListener: Int? = nil, kernelVersion: String? = nil, operatingSystem: String? = nil, oSVersion: String? = nil, oSType: String? = nil, architecture: String? = nil, NCPU: Int? = nil, memTotal: Int64? = nil, indexServerAddress: String? = "https://index.docker.io/v1/", registryConfig: RegistryServiceConfig? = nil, genericResources: [GenericResourcesInner]? = nil, httpProxy: String? = nil, httpsProxy: String? = nil, noProxy: String? = nil, name: String? = nil, labels: [String]? = nil, experimentalBuild: Bool? = nil, serverVersion: String? = nil, clusterStore: String? = nil, clusterAdvertise: String? = nil, runtimes: [String: Runtime]? = nil, defaultRuntime: String? = "runc", swarm: SwarmInfo? = nil, liveRestoreEnabled: Bool? = false, isolation: Isolation? = ._default, initBinary: String? = nil, containerdCommit: Commit? = nil, runcCommit: Commit? = nil, initCommit: Commit? = nil, securityOptions: [String]? = nil, productLicense: String? = nil, defaultAddressPools: [SystemInfoDefaultAddressPoolsInner]? = nil, warnings: [String]? = nil) {
        self.ID = ID
        self.containers = containers
        self.containersRunning = containersRunning
        self.containersPaused = containersPaused
        self.containersStopped = containersStopped
        self.images = images
        self.driver = driver
        self.driverStatus = driverStatus
        self.dockerRootDir = dockerRootDir
        self.plugins = plugins
        self.memoryLimit = memoryLimit
        self.swapLimit = swapLimit
        self.kernelMemoryTCP = kernelMemoryTCP
        self.cpuCfsPeriod = cpuCfsPeriod
        self.cpuCfsQuota = cpuCfsQuota
        self.cPUShares = cPUShares
        self.cPUSet = cPUSet
        self.pidsLimit = pidsLimit
        self.oomKillDisable = oomKillDisable
        self.iPv4Forwarding = iPv4Forwarding
        self.bridgeNfIptables = bridgeNfIptables
        self.bridgeNfIp6tables = bridgeNfIp6tables
        self.debug = debug
        self.nFd = nFd
        self.nGoroutines = nGoroutines
        self.systemTime = systemTime
        self.loggingDriver = loggingDriver
        self.cgroupDriver = cgroupDriver
        self.cgroupVersion = cgroupVersion
        self.nEventsListener = nEventsListener
        self.kernelVersion = kernelVersion
        self.operatingSystem = operatingSystem
        self.oSVersion = oSVersion
        self.oSType = oSType
        self.architecture = architecture
        self.NCPU = NCPU
        self.memTotal = memTotal
        self.indexServerAddress = indexServerAddress
        self.registryConfig = registryConfig
        self.genericResources = genericResources
        self.httpProxy = httpProxy
        self.httpsProxy = httpsProxy
        self.noProxy = noProxy
        self.name = name
        self.labels = labels
        self.experimentalBuild = experimentalBuild
        self.serverVersion = serverVersion
        self.clusterStore = clusterStore
        self.clusterAdvertise = clusterAdvertise
        self.runtimes = runtimes
        self.defaultRuntime = defaultRuntime
        self.swarm = swarm
        self.liveRestoreEnabled = liveRestoreEnabled
        self.isolation = isolation
        self.initBinary = initBinary
        self.containerdCommit = containerdCommit
        self.runcCommit = runcCommit
        self.initCommit = initCommit
        self.securityOptions = securityOptions
        self.productLicense = productLicense
        self.defaultAddressPools = defaultAddressPools
        self.warnings = warnings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ID
        case containers = "Containers"
        case containersRunning = "ContainersRunning"
        case containersPaused = "ContainersPaused"
        case containersStopped = "ContainersStopped"
        case images = "Images"
        case driver = "Driver"
        case driverStatus = "DriverStatus"
        case dockerRootDir = "DockerRootDir"
        case plugins = "Plugins"
        case memoryLimit = "MemoryLimit"
        case swapLimit = "SwapLimit"
        case kernelMemoryTCP = "KernelMemoryTCP"
        case cpuCfsPeriod = "CpuCfsPeriod"
        case cpuCfsQuota = "CpuCfsQuota"
        case cPUShares = "CPUShares"
        case cPUSet = "CPUSet"
        case pidsLimit = "PidsLimit"
        case oomKillDisable = "OomKillDisable"
        case iPv4Forwarding = "IPv4Forwarding"
        case bridgeNfIptables = "BridgeNfIptables"
        case bridgeNfIp6tables = "BridgeNfIp6tables"
        case debug = "Debug"
        case nFd = "NFd"
        case nGoroutines = "NGoroutines"
        case systemTime = "SystemTime"
        case loggingDriver = "LoggingDriver"
        case cgroupDriver = "CgroupDriver"
        case cgroupVersion = "CgroupVersion"
        case nEventsListener = "NEventsListener"
        case kernelVersion = "KernelVersion"
        case operatingSystem = "OperatingSystem"
        case oSVersion = "OSVersion"
        case oSType = "OSType"
        case architecture = "Architecture"
        case NCPU
        case memTotal = "MemTotal"
        case indexServerAddress = "IndexServerAddress"
        case registryConfig = "RegistryConfig"
        case genericResources = "GenericResources"
        case httpProxy = "HttpProxy"
        case httpsProxy = "HttpsProxy"
        case noProxy = "NoProxy"
        case name = "Name"
        case labels = "Labels"
        case experimentalBuild = "ExperimentalBuild"
        case serverVersion = "ServerVersion"
        case clusterStore = "ClusterStore"
        case clusterAdvertise = "ClusterAdvertise"
        case runtimes = "Runtimes"
        case defaultRuntime = "DefaultRuntime"
        case swarm = "Swarm"
        case liveRestoreEnabled = "LiveRestoreEnabled"
        case isolation = "Isolation"
        case initBinary = "InitBinary"
        case containerdCommit = "ContainerdCommit"
        case runcCommit = "RuncCommit"
        case initCommit = "InitCommit"
        case securityOptions = "SecurityOptions"
        case productLicense = "ProductLicense"
        case defaultAddressPools = "DefaultAddressPools"
        case warnings = "Warnings"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ID, forKey: .ID)
        try container.encodeIfPresent(containers, forKey: .containers)
        try container.encodeIfPresent(containersRunning, forKey: .containersRunning)
        try container.encodeIfPresent(containersPaused, forKey: .containersPaused)
        try container.encodeIfPresent(containersStopped, forKey: .containersStopped)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(driver, forKey: .driver)
        try container.encodeIfPresent(driverStatus, forKey: .driverStatus)
        try container.encodeIfPresent(dockerRootDir, forKey: .dockerRootDir)
        try container.encodeIfPresent(plugins, forKey: .plugins)
        try container.encodeIfPresent(memoryLimit, forKey: .memoryLimit)
        try container.encodeIfPresent(swapLimit, forKey: .swapLimit)
        try container.encodeIfPresent(kernelMemoryTCP, forKey: .kernelMemoryTCP)
        try container.encodeIfPresent(cpuCfsPeriod, forKey: .cpuCfsPeriod)
        try container.encodeIfPresent(cpuCfsQuota, forKey: .cpuCfsQuota)
        try container.encodeIfPresent(cPUShares, forKey: .cPUShares)
        try container.encodeIfPresent(cPUSet, forKey: .cPUSet)
        try container.encodeIfPresent(pidsLimit, forKey: .pidsLimit)
        try container.encodeIfPresent(oomKillDisable, forKey: .oomKillDisable)
        try container.encodeIfPresent(iPv4Forwarding, forKey: .iPv4Forwarding)
        try container.encodeIfPresent(bridgeNfIptables, forKey: .bridgeNfIptables)
        try container.encodeIfPresent(bridgeNfIp6tables, forKey: .bridgeNfIp6tables)
        try container.encodeIfPresent(debug, forKey: .debug)
        try container.encodeIfPresent(nFd, forKey: .nFd)
        try container.encodeIfPresent(nGoroutines, forKey: .nGoroutines)
        try container.encodeIfPresent(systemTime, forKey: .systemTime)
        try container.encodeIfPresent(loggingDriver, forKey: .loggingDriver)
        try container.encodeIfPresent(cgroupDriver, forKey: .cgroupDriver)
        try container.encodeIfPresent(cgroupVersion, forKey: .cgroupVersion)
        try container.encodeIfPresent(nEventsListener, forKey: .nEventsListener)
        try container.encodeIfPresent(kernelVersion, forKey: .kernelVersion)
        try container.encodeIfPresent(operatingSystem, forKey: .operatingSystem)
        try container.encodeIfPresent(oSVersion, forKey: .oSVersion)
        try container.encodeIfPresent(oSType, forKey: .oSType)
        try container.encodeIfPresent(architecture, forKey: .architecture)
        try container.encodeIfPresent(NCPU, forKey: .NCPU)
        try container.encodeIfPresent(memTotal, forKey: .memTotal)
        try container.encodeIfPresent(indexServerAddress, forKey: .indexServerAddress)
        try container.encodeIfPresent(registryConfig, forKey: .registryConfig)
        try container.encodeIfPresent(genericResources, forKey: .genericResources)
        try container.encodeIfPresent(httpProxy, forKey: .httpProxy)
        try container.encodeIfPresent(httpsProxy, forKey: .httpsProxy)
        try container.encodeIfPresent(noProxy, forKey: .noProxy)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(experimentalBuild, forKey: .experimentalBuild)
        try container.encodeIfPresent(serverVersion, forKey: .serverVersion)
        try container.encodeIfPresent(clusterStore, forKey: .clusterStore)
        try container.encodeIfPresent(clusterAdvertise, forKey: .clusterAdvertise)
        try container.encodeIfPresent(runtimes, forKey: .runtimes)
        try container.encodeIfPresent(defaultRuntime, forKey: .defaultRuntime)
        try container.encodeIfPresent(swarm, forKey: .swarm)
        try container.encodeIfPresent(liveRestoreEnabled, forKey: .liveRestoreEnabled)
        try container.encodeIfPresent(isolation, forKey: .isolation)
        try container.encodeIfPresent(initBinary, forKey: .initBinary)
        try container.encodeIfPresent(containerdCommit, forKey: .containerdCommit)
        try container.encodeIfPresent(runcCommit, forKey: .runcCommit)
        try container.encodeIfPresent(initCommit, forKey: .initCommit)
        try container.encodeIfPresent(securityOptions, forKey: .securityOptions)
        try container.encodeIfPresent(productLicense, forKey: .productLicense)
        try container.encodeIfPresent(defaultAddressPools, forKey: .defaultAddressPools)
        try container.encodeIfPresent(warnings, forKey: .warnings)
    }
}

