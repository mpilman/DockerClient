//
// TLSInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Information about the issuer of leaf TLS certificates and the trusted root CA certificate.  */
public struct TLSInfo: Codable, JSONEncodable, Hashable {

    /** The root CA certificate(s) that are used to validate leaf TLS certificates.  */
    public var trustRoot: String?
    /** The base64-url-safe-encoded raw subject bytes of the issuer. */
    public var certIssuerSubject: String?
    /** The base64-url-safe-encoded raw public key bytes of the issuer.  */
    public var certIssuerPublicKey: String?

    public init(trustRoot: String? = nil, certIssuerSubject: String? = nil, certIssuerPublicKey: String? = nil) {
        self.trustRoot = trustRoot
        self.certIssuerSubject = certIssuerSubject
        self.certIssuerPublicKey = certIssuerPublicKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case trustRoot = "TrustRoot"
        case certIssuerSubject = "CertIssuerSubject"
        case certIssuerPublicKey = "CertIssuerPublicKey"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(trustRoot, forKey: .trustRoot)
        try container.encodeIfPresent(certIssuerSubject, forKey: .certIssuerSubject)
        try container.encodeIfPresent(certIssuerPublicKey, forKey: .certIssuerPublicKey)
    }
}

