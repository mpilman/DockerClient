//
// TaskSpecRestartPolicy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Specification for the restart policy which applies to containers created as part of this service.  */
public struct TaskSpecRestartPolicy: Codable, JSONEncodable, Hashable {

    public enum Condition: String, Codable, CaseIterable {
        case _none = "none"
        case onFailure = "on-failure"
        case any = "any"
    }
    /** Condition for restart. */
    public var condition: Condition?
    /** Delay between restart attempts. */
    public var delay: Int64?
    /** Maximum attempts to restart a given container before giving up (default value is 0, which is ignored).  */
    public var maxAttempts: Int64? = 0
    /** Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded).  */
    public var window: Int64? = 0

    public init(condition: Condition? = nil, delay: Int64? = nil, maxAttempts: Int64? = 0, window: Int64? = 0) {
        self.condition = condition
        self.delay = delay
        self.maxAttempts = maxAttempts
        self.window = window
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case condition = "Condition"
        case delay = "Delay"
        case maxAttempts = "MaxAttempts"
        case window = "Window"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encodeIfPresent(delay, forKey: .delay)
        try container.encodeIfPresent(maxAttempts, forKey: .maxAttempts)
        try container.encodeIfPresent(window, forKey: .window)
    }
}

