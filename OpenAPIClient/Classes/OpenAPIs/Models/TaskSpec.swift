//
// TaskSpec.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** User modifiable task configuration. */
public struct TaskSpec: Codable, JSONEncodable, Hashable {

    public var pluginSpec: TaskSpecPluginSpec?
    public var containerSpec: TaskSpecContainerSpec?
    public var networkAttachmentSpec: TaskSpecNetworkAttachmentSpec?
    public var resources: TaskSpecResources?
    public var restartPolicy: TaskSpecRestartPolicy?
    public var placement: TaskSpecPlacement?
    /** A counter that triggers an update even if no relevant parameters have been changed.  */
    public var forceUpdate: Int?
    /** Runtime is the type of runtime specified for the task executor.  */
    public var runtime: String?
    /** Specifies which networks the service should attach to. */
    public var networks: [NetworkAttachmentConfig]?
    public var logDriver: TaskSpecLogDriver?

    public init(pluginSpec: TaskSpecPluginSpec? = nil, containerSpec: TaskSpecContainerSpec? = nil, networkAttachmentSpec: TaskSpecNetworkAttachmentSpec? = nil, resources: TaskSpecResources? = nil, restartPolicy: TaskSpecRestartPolicy? = nil, placement: TaskSpecPlacement? = nil, forceUpdate: Int? = nil, runtime: String? = nil, networks: [NetworkAttachmentConfig]? = nil, logDriver: TaskSpecLogDriver? = nil) {
        self.pluginSpec = pluginSpec
        self.containerSpec = containerSpec
        self.networkAttachmentSpec = networkAttachmentSpec
        self.resources = resources
        self.restartPolicy = restartPolicy
        self.placement = placement
        self.forceUpdate = forceUpdate
        self.runtime = runtime
        self.networks = networks
        self.logDriver = logDriver
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pluginSpec = "PluginSpec"
        case containerSpec = "ContainerSpec"
        case networkAttachmentSpec = "NetworkAttachmentSpec"
        case resources = "Resources"
        case restartPolicy = "RestartPolicy"
        case placement = "Placement"
        case forceUpdate = "ForceUpdate"
        case runtime = "Runtime"
        case networks = "Networks"
        case logDriver = "LogDriver"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pluginSpec, forKey: .pluginSpec)
        try container.encodeIfPresent(containerSpec, forKey: .containerSpec)
        try container.encodeIfPresent(networkAttachmentSpec, forKey: .networkAttachmentSpec)
        try container.encodeIfPresent(resources, forKey: .resources)
        try container.encodeIfPresent(restartPolicy, forKey: .restartPolicy)
        try container.encodeIfPresent(placement, forKey: .placement)
        try container.encodeIfPresent(forceUpdate, forKey: .forceUpdate)
        try container.encodeIfPresent(runtime, forKey: .runtime)
        try container.encodeIfPresent(networks, forKey: .networks)
        try container.encodeIfPresent(logDriver, forKey: .logDriver)
    }
}

