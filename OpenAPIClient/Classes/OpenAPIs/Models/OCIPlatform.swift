//
// OCIPlatform.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Describes the platform which the image in the manifest runs on, as defined in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).  */
public struct OCIPlatform: Codable, JSONEncodable, Hashable {

    /** The CPU architecture, for example `amd64` or `ppc64`.  */
    public var architecture: String?
    /** The operating system, for example `linux` or `windows`.  */
    public var os: String?
    /** Optional field specifying the operating system version, for example on Windows `10.0.19041.1165`.  */
    public var osVersion: String?
    /** Optional field specifying an array of strings, each listing a required OS feature (for example on Windows `win32k`).  */
    public var osFeatures: [String]?
    /** Optional field specifying a variant of the CPU, for example `v7` to specify ARMv7 when architecture is `arm`.  */
    public var variant: String?

    public init(architecture: String? = nil, os: String? = nil, osVersion: String? = nil, osFeatures: [String]? = nil, variant: String? = nil) {
        self.architecture = architecture
        self.os = os
        self.osVersion = osVersion
        self.osFeatures = osFeatures
        self.variant = variant
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case architecture
        case os
        case osVersion = "os.version"
        case osFeatures = "os.features"
        case variant
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(architecture, forKey: .architecture)
        try container.encodeIfPresent(os, forKey: .os)
        try container.encodeIfPresent(osVersion, forKey: .osVersion)
        try container.encodeIfPresent(osFeatures, forKey: .osFeatures)
        try container.encodeIfPresent(variant, forKey: .variant)
    }
}

