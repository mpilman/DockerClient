//
// ImageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ImageAPI {

    /**
     Delete builder cache
     
     - parameter keepStorage: (query) Amount of disk space in bytes to keep for cache (optional)
     - parameter all: (query) Remove all types of build cache (optional)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#39;s time, during which build cache was not used, in Go&#39;s duration format (e.g., &#39;24h&#39;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60;  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func buildPrune(keepStorage: Int64? = nil, all: Bool? = nil, filters: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BuildPruneResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return buildPruneWithRequestBuilder(keepStorage: keepStorage, all: all, filters: filters).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete builder cache
     - POST /build/prune
     - parameter keepStorage: (query) Amount of disk space in bytes to keep for cache (optional)
     - parameter all: (query) Remove all types of build cache (optional)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#39;s time, during which build cache was not used, in Go&#39;s duration format (e.g., &#39;24h&#39;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60;  (optional)
     - returns: RequestBuilder<BuildPruneResponse> 
     */
    open class func buildPruneWithRequestBuilder(keepStorage: Int64? = nil, all: Bool? = nil, filters: String? = nil) -> RequestBuilder<BuildPruneResponse> {
        let localVariablePath = "/build/prune"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "keep-storage": (wrappedValue: keepStorage?.encodeToJSON(), isExplode: false),
            "all": (wrappedValue: all?.encodeToJSON(), isExplode: false),
            "filters": (wrappedValue: filters?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildPruneResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_imageBuild: String, CaseIterable {
        case applicationSlashXTar = "application/x-tar"
    }

    /**
     Build an image
     
     - parameter dockerfile: (query) Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to "Dockerfile")
     - parameter t: (query) A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     - parameter extrahosts: (query) Extra hosts to add to /etc/hosts (optional)
     - parameter remote: (query) A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the fileâ€™s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     - parameter q: (query) Suppress verbose build output. (optional, default to false)
     - parameter nocache: (query) Do not use the cache when building the image. (optional, default to false)
     - parameter cachefrom: (query) JSON array of images used for build cache resolution. (optional)
     - parameter pull: (query) Attempt to pull the image even if an older image exists locally. (optional)
     - parameter rm: (query) Remove intermediate containers after a successful build. (optional, default to true)
     - parameter forcerm: (query) Always remove intermediate containers, even upon failure. (optional, default to false)
     - parameter memory: (query) Set memory limit for build. (optional)
     - parameter memswap: (query) Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     - parameter cpushares: (query) CPU shares (relative weight). (optional)
     - parameter cpusetcpus: (query) CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     - parameter cpuperiod: (query) The length of a CPU period in microseconds. (optional)
     - parameter cpuquota: (query) Microseconds of CPU time that the container can get in a CPU period. (optional)
     - parameter buildargs: (query) JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg)  (optional)
     - parameter shmsize: (query) Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     - parameter squash: (query) Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     - parameter labels: (query) Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     - parameter networkmode: (query) Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to.  (optional)
     - parameter contentType: (header)  (optional, default to .applicationSlashXTar)
     - parameter xRegistryConfig: (header) This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API.  (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]] (optional)
     - parameter target: (query) Target build stage (optional)
     - parameter outputs: (query) BuildKit output configuration (optional)
     - parameter inputStream: (body) A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageBuild(dockerfile: String? = nil, t: String? = nil, extrahosts: String? = nil, remote: String? = nil, q: Bool? = nil, nocache: Bool? = nil, cachefrom: String? = nil, pull: String? = nil, rm: Bool? = nil, forcerm: Bool? = nil, memory: Int? = nil, memswap: Int? = nil, cpushares: Int? = nil, cpusetcpus: String? = nil, cpuperiod: Int? = nil, cpuquota: Int? = nil, buildargs: String? = nil, shmsize: Int? = nil, squash: Bool? = nil, labels: String? = nil, networkmode: String? = nil, contentType: ContentType_imageBuild? = nil, xRegistryConfig: String? = nil, platform: String? = nil, target: String? = nil, outputs: String? = nil, inputStream: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return imageBuildWithRequestBuilder(dockerfile: dockerfile, t: t, extrahosts: extrahosts, remote: remote, q: q, nocache: nocache, cachefrom: cachefrom, pull: pull, rm: rm, forcerm: forcerm, memory: memory, memswap: memswap, cpushares: cpushares, cpusetcpus: cpusetcpus, cpuperiod: cpuperiod, cpuquota: cpuquota, buildargs: buildargs, shmsize: shmsize, squash: squash, labels: labels, networkmode: networkmode, contentType: contentType, xRegistryConfig: xRegistryConfig, platform: platform, target: target, outputs: outputs, inputStream: inputStream).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Build an image
     - POST /build
     - Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
     - parameter dockerfile: (query) Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to "Dockerfile")
     - parameter t: (query) A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     - parameter extrahosts: (query) Extra hosts to add to /etc/hosts (optional)
     - parameter remote: (query) A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the fileâ€™s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     - parameter q: (query) Suppress verbose build output. (optional, default to false)
     - parameter nocache: (query) Do not use the cache when building the image. (optional, default to false)
     - parameter cachefrom: (query) JSON array of images used for build cache resolution. (optional)
     - parameter pull: (query) Attempt to pull the image even if an older image exists locally. (optional)
     - parameter rm: (query) Remove intermediate containers after a successful build. (optional, default to true)
     - parameter forcerm: (query) Always remove intermediate containers, even upon failure. (optional, default to false)
     - parameter memory: (query) Set memory limit for build. (optional)
     - parameter memswap: (query) Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     - parameter cpushares: (query) CPU shares (relative weight). (optional)
     - parameter cpusetcpus: (query) CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     - parameter cpuperiod: (query) The length of a CPU period in microseconds. (optional)
     - parameter cpuquota: (query) Microseconds of CPU time that the container can get in a CPU period. (optional)
     - parameter buildargs: (query) JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg)  (optional)
     - parameter shmsize: (query) Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     - parameter squash: (query) Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     - parameter labels: (query) Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     - parameter networkmode: (query) Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to.  (optional)
     - parameter contentType: (header)  (optional, default to .applicationSlashXTar)
     - parameter xRegistryConfig: (header) This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API.  (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]] (optional)
     - parameter target: (query) Target build stage (optional)
     - parameter outputs: (query) BuildKit output configuration (optional)
     - parameter inputStream: (body) A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func imageBuildWithRequestBuilder(dockerfile: String? = nil, t: String? = nil, extrahosts: String? = nil, remote: String? = nil, q: Bool? = nil, nocache: Bool? = nil, cachefrom: String? = nil, pull: String? = nil, rm: Bool? = nil, forcerm: Bool? = nil, memory: Int? = nil, memswap: Int? = nil, cpushares: Int? = nil, cpusetcpus: String? = nil, cpuperiod: Int? = nil, cpuquota: Int? = nil, buildargs: String? = nil, shmsize: Int? = nil, squash: Bool? = nil, labels: String? = nil, networkmode: String? = nil, contentType: ContentType_imageBuild? = nil, xRegistryConfig: String? = nil, platform: String? = nil, target: String? = nil, outputs: String? = nil, inputStream: URL? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/build"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inputStream)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dockerfile": (wrappedValue: dockerfile?.encodeToJSON(), isExplode: false),
            "t": (wrappedValue: t?.encodeToJSON(), isExplode: false),
            "extrahosts": (wrappedValue: extrahosts?.encodeToJSON(), isExplode: false),
            "remote": (wrappedValue: remote?.encodeToJSON(), isExplode: false),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: false),
            "nocache": (wrappedValue: nocache?.encodeToJSON(), isExplode: false),
            "cachefrom": (wrappedValue: cachefrom?.encodeToJSON(), isExplode: false),
            "pull": (wrappedValue: pull?.encodeToJSON(), isExplode: false),
            "rm": (wrappedValue: rm?.encodeToJSON(), isExplode: false),
            "forcerm": (wrappedValue: forcerm?.encodeToJSON(), isExplode: false),
            "memory": (wrappedValue: memory?.encodeToJSON(), isExplode: false),
            "memswap": (wrappedValue: memswap?.encodeToJSON(), isExplode: false),
            "cpushares": (wrappedValue: cpushares?.encodeToJSON(), isExplode: false),
            "cpusetcpus": (wrappedValue: cpusetcpus?.encodeToJSON(), isExplode: false),
            "cpuperiod": (wrappedValue: cpuperiod?.encodeToJSON(), isExplode: false),
            "cpuquota": (wrappedValue: cpuquota?.encodeToJSON(), isExplode: false),
            "buildargs": (wrappedValue: buildargs?.encodeToJSON(), isExplode: false),
            "shmsize": (wrappedValue: shmsize?.encodeToJSON(), isExplode: false),
            "squash": (wrappedValue: squash?.encodeToJSON(), isExplode: false),
            "labels": (wrappedValue: labels?.encodeToJSON(), isExplode: false),
            "networkmode": (wrappedValue: networkmode?.encodeToJSON(), isExplode: false),
            "platform": (wrappedValue: platform?.encodeToJSON(), isExplode: false),
            "target": (wrappedValue: target?.encodeToJSON(), isExplode: false),
            "outputs": (wrappedValue: outputs?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-type": contentType?.encodeToJSON(),
            "X-Registry-Config": xRegistryConfig?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a new image from a container
     
     - parameter container: (query) The ID or name of the container to commit (optional)
     - parameter repo: (query) Repository name for the created image (optional)
     - parameter tag: (query) Tag name for the create image (optional)
     - parameter comment: (query) Commit message (optional)
     - parameter author: (query) Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     - parameter pause: (query) Whether to pause the container before committing (optional, default to true)
     - parameter changes: (query) &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     - parameter containerConfig: (body) The container configuration (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageCommit(container: String? = nil, repo: String? = nil, tag: String? = nil, comment: String? = nil, author: String? = nil, pause: Bool? = nil, changes: String? = nil, containerConfig: ContainerConfig? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IdResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return imageCommitWithRequestBuilder(container: container, repo: repo, tag: tag, comment: comment, author: author, pause: pause, changes: changes, containerConfig: containerConfig).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new image from a container
     - POST /commit
     - parameter container: (query) The ID or name of the container to commit (optional)
     - parameter repo: (query) Repository name for the created image (optional)
     - parameter tag: (query) Tag name for the create image (optional)
     - parameter comment: (query) Commit message (optional)
     - parameter author: (query) Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     - parameter pause: (query) Whether to pause the container before committing (optional, default to true)
     - parameter changes: (query) &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     - parameter containerConfig: (body) The container configuration (optional)
     - returns: RequestBuilder<IdResponse> 
     */
    open class func imageCommitWithRequestBuilder(container: String? = nil, repo: String? = nil, tag: String? = nil, comment: String? = nil, author: String? = nil, pause: Bool? = nil, changes: String? = nil, containerConfig: ContainerConfig? = nil) -> RequestBuilder<IdResponse> {
        let localVariablePath = "/commit"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: containerConfig)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "container": (wrappedValue: container?.encodeToJSON(), isExplode: false),
            "repo": (wrappedValue: repo?.encodeToJSON(), isExplode: false),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: false),
            "comment": (wrappedValue: comment?.encodeToJSON(), isExplode: false),
            "author": (wrappedValue: author?.encodeToJSON(), isExplode: false),
            "pause": (wrappedValue: pause?.encodeToJSON(), isExplode: false),
            "changes": (wrappedValue: changes?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create an image
     
     - parameter fromImage: (query) Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     - parameter fromSrc: (query) Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     - parameter repo: (query) Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     - parameter tag: (query) Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     - parameter message: (query) Set commit message for imported image. (optional)
     - parameter xRegistryAuth: (header) A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details.  (optional)
     - parameter changes: (query) Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60;  (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image.  (optional)
     - parameter inputImage: (body) Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageCreate(fromImage: String? = nil, fromSrc: String? = nil, repo: String? = nil, tag: String? = nil, message: String? = nil, xRegistryAuth: String? = nil, changes: [String]? = nil, platform: String? = nil, inputImage: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return imageCreateWithRequestBuilder(fromImage: fromImage, fromSrc: fromSrc, repo: repo, tag: tag, message: message, xRegistryAuth: xRegistryAuth, changes: changes, platform: platform, inputImage: inputImage).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an image
     - POST /images/create
     - Create an image by either pulling it from a registry or importing it.
     - parameter fromImage: (query) Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     - parameter fromSrc: (query) Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     - parameter repo: (query) Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     - parameter tag: (query) Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     - parameter message: (query) Set commit message for imported image. (optional)
     - parameter xRegistryAuth: (header) A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details.  (optional)
     - parameter changes: (query) Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60;  (optional)
     - parameter platform: (query) Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image.  (optional)
     - parameter inputImage: (body) Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func imageCreateWithRequestBuilder(fromImage: String? = nil, fromSrc: String? = nil, repo: String? = nil, tag: String? = nil, message: String? = nil, xRegistryAuth: String? = nil, changes: [String]? = nil, platform: String? = nil, inputImage: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/images/create"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inputImage)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromImage": (wrappedValue: fromImage?.encodeToJSON(), isExplode: false),
            "fromSrc": (wrappedValue: fromSrc?.encodeToJSON(), isExplode: false),
            "repo": (wrappedValue: repo?.encodeToJSON(), isExplode: false),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: false),
            "message": (wrappedValue: message?.encodeToJSON(), isExplode: false),
            "changes": (wrappedValue: changes?.encodeToJSON(), isExplode: false),
            "platform": (wrappedValue: platform?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Registry-Auth": xRegistryAuth?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Remove an image
     
     - parameter name: (path) Image name or ID 
     - parameter force: (query) Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     - parameter noprune: (query) Do not delete untagged parent images (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageDelete(name: String, force: Bool? = nil, noprune: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ImageDeleteResponseItem]?, _ error: Error?) -> Void)) -> RequestTask {
        return imageDeleteWithRequestBuilder(name: name, force: force, noprune: noprune).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove an image
     - DELETE /images/{name}
     - Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
     - parameter name: (path) Image name or ID 
     - parameter force: (query) Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     - parameter noprune: (query) Do not delete untagged parent images (optional, default to false)
     - returns: RequestBuilder<[ImageDeleteResponseItem]> 
     */
    open class func imageDeleteWithRequestBuilder(name: String, force: Bool? = nil, noprune: Bool? = nil) -> RequestBuilder<[ImageDeleteResponseItem]> {
        var localVariablePath = "/images/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "force": (wrappedValue: force?.encodeToJSON(), isExplode: false),
            "noprune": (wrappedValue: noprune?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ImageDeleteResponseItem]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Export an image
     
     - parameter name: (path) Image name or ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageGet(name: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return imageGetWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Export an image
     - GET /images/{name}/get
     - Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
     - parameter name: (path) Image name or ID 
     - returns: RequestBuilder<URL> 
     */
    open class func imageGetWithRequestBuilder(name: String) -> RequestBuilder<URL> {
        var localVariablePath = "/images/{name}/get"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Export several images
     
     - parameter names: (query) Image names to filter by (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageGetAll(names: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return imageGetAllWithRequestBuilder(names: names).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Export several images
     - GET /images/get
     - Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     - parameter names: (query) Image names to filter by (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func imageGetAllWithRequestBuilder(names: [String]? = nil) -> RequestBuilder<URL> {
        let localVariablePath = "/images/get"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "names": (wrappedValue: names?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get the history of an image
     
     - parameter name: (path) Image name or ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageHistory(name: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [HistoryResponseItem]?, _ error: Error?) -> Void)) -> RequestTask {
        return imageHistoryWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the history of an image
     - GET /images/{name}/history
     - Return parent layers of an image.
     - parameter name: (path) Image name or ID 
     - returns: RequestBuilder<[HistoryResponseItem]> 
     */
    open class func imageHistoryWithRequestBuilder(name: String) -> RequestBuilder<[HistoryResponseItem]> {
        var localVariablePath = "/images/{name}/history"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[HistoryResponseItem]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Inspect an image
     
     - parameter name: (path) Image name or id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageInspect(name: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ImageInspect?, _ error: Error?) -> Void)) -> RequestTask {
        return imageInspectWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Inspect an image
     - GET /images/{name}/json
     - Return low-level information about an image.
     - parameter name: (path) Image name or id 
     - returns: RequestBuilder<ImageInspect> 
     */
    open class func imageInspectWithRequestBuilder(name: String) -> RequestBuilder<ImageInspect> {
        var localVariablePath = "/images/{name}/json"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImageInspect>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List Images
     
     - parameter all: (query) Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;)  (optional)
     - parameter sharedSize: (query) Compute and show shared size as a &#x60;SharedSize&#x60; field on each image. (optional, default to false)
     - parameter digests: (query) Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageList(all: Bool? = nil, filters: String? = nil, sharedSize: Bool? = nil, digests: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ImageSummary]?, _ error: Error?) -> Void)) -> RequestTask {
        return imageListWithRequestBuilder(all: all, filters: filters, sharedSize: sharedSize, digests: digests).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Images
     - GET /images/json
     - Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     - parameter all: (query) Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;)  (optional)
     - parameter sharedSize: (query) Compute and show shared size as a &#x60;SharedSize&#x60; field on each image. (optional, default to false)
     - parameter digests: (query) Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     - returns: RequestBuilder<[ImageSummary]> 
     */
    open class func imageListWithRequestBuilder(all: Bool? = nil, filters: String? = nil, sharedSize: Bool? = nil, digests: Bool? = nil) -> RequestBuilder<[ImageSummary]> {
        let localVariablePath = "/images/json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "all": (wrappedValue: all?.encodeToJSON(), isExplode: false),
            "filters": (wrappedValue: filters?.encodeToJSON(), isExplode: false),
            "shared-size": (wrappedValue: sharedSize?.encodeToJSON(), isExplode: false),
            "digests": (wrappedValue: digests?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ImageSummary]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Import images
     
     - parameter quiet: (query) Suppress progress details during load. (optional, default to false)
     - parameter imagesTarball: (body) Tar archive containing images (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageLoad(quiet: Bool? = nil, imagesTarball: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return imageLoadWithRequestBuilder(quiet: quiet, imagesTarball: imagesTarball).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Import images
     - POST /images/load
     - Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     - parameter quiet: (query) Suppress progress details during load. (optional, default to false)
     - parameter imagesTarball: (body) Tar archive containing images (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func imageLoadWithRequestBuilder(quiet: Bool? = nil, imagesTarball: URL? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/images/load"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imagesTarball)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "quiet": (wrappedValue: quiet?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete unused images
     
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machineâ€™s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imagePrune(filters: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ImagePruneResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return imagePruneWithRequestBuilder(filters: filters).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete unused images
     - POST /images/prune
     - parameter filters: (query) Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machineâ€™s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)
     - returns: RequestBuilder<ImagePruneResponse> 
     */
    open class func imagePruneWithRequestBuilder(filters: String? = nil) -> RequestBuilder<ImagePruneResponse> {
        let localVariablePath = "/images/prune"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filters": (wrappedValue: filters?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImagePruneResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Push an image
     
     - parameter name: (path) Image name or ID. 
     - parameter xRegistryAuth: (header) A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details.  
     - parameter tag: (query) The tag to associate with the image on the registry. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imagePush(name: String, xRegistryAuth: String, tag: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return imagePushWithRequestBuilder(name: name, xRegistryAuth: xRegistryAuth, tag: tag).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Push an image
     - POST /images/{name}/push
     - Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
     - parameter name: (path) Image name or ID. 
     - parameter xRegistryAuth: (header) A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details.  
     - parameter tag: (query) The tag to associate with the image on the registry. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func imagePushWithRequestBuilder(name: String, xRegistryAuth: String, tag: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/images/{name}/push"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Registry-Auth": xRegistryAuth.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Search images
     
     - parameter term: (query) Term to search 
     - parameter limit: (query) Maximum number of results to return (optional)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageSearch(term: String, limit: Int? = nil, filters: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ImageSearchResponseItem]?, _ error: Error?) -> Void)) -> RequestTask {
        return imageSearchWithRequestBuilder(term: term, limit: limit, filters: filters).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search images
     - GET /images/search
     - Search for an image on Docker Hub.
     - parameter term: (query) Term to search 
     - parameter limit: (query) Maximum number of results to return (optional)
     - parameter filters: (query) A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  (optional)
     - returns: RequestBuilder<[ImageSearchResponseItem]> 
     */
    open class func imageSearchWithRequestBuilder(term: String, limit: Int? = nil, filters: String? = nil) -> RequestBuilder<[ImageSearchResponseItem]> {
        let localVariablePath = "/images/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "term": (wrappedValue: term.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "filters": (wrappedValue: filters?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ImageSearchResponseItem]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Tag an image
     
     - parameter name: (path) Image name or ID to tag. 
     - parameter repo: (query) The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     - parameter tag: (query) The name of the new tag. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageTag(name: String, repo: String? = nil, tag: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return imageTagWithRequestBuilder(name: name, repo: repo, tag: tag).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Tag an image
     - POST /images/{name}/tag
     - Tag an image so that it becomes part of a repository.
     - parameter name: (path) Image name or ID to tag. 
     - parameter repo: (query) The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     - parameter tag: (query) The name of the new tag. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func imageTagWithRequestBuilder(name: String, repo: String? = nil, tag: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/images/{name}/tag"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "repo": (wrappedValue: repo?.encodeToJSON(), isExplode: false),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
